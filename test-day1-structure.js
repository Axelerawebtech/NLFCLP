// Test the Day 1 Configuration API directly
import fetch from 'node-fetch';

const testDay1Configuration = async () => {
  console.log('üß™ Testing Day 1 Configuration API...');
  
  const testData = {
    day1Config: {
      mild: {
        videoTitle: { english: 'Mild Burden Support Video', kannada: '', hindi: '' },
        videoUrl: { english: 'https://example.com/mild.mp4', kannada: '', hindi: '' },
        description: { english: 'Support video for mild burden level', kannada: '', hindi: '' }
      },
      moderate: {
        videoTitle: { english: 'Moderate Burden Support Video', kannada: '', hindi: '' },
        videoUrl: { english: 'https://example.com/moderate.mp4', kannada: '', hindi: '' },
        description: { english: 'Support video for moderate burden level', kannada: '', hindi: '' }
      },
      severe: {
        videoTitle: { english: 'Severe Burden Support Video', kannada: '', hindi: '' },
        videoUrl: { english: 'https://example.com/severe.mp4', kannada: '', hindi: '' },
        description: { english: 'Support video for severe burden level', kannada: '', hindi: '' }
      }
    },
    burdenTestQuestions: [
      {
        id: 1,
        questionText: {
          english: 'Do you feel that your relative asks for more help than he/she needs?',
          kannada: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤ï‡≤∞‡≥Å ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤ï‡≥á‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤æ‡≤∞‡≥Ü‡≤Ø‡≥á ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤≠‡≤æ‡≤µ‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤æ?',
          hindi: '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§∞‡§ø‡§∂‡•ç‡§§‡•á‡§¶‡§æ‡§∞ ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Æ‡§¶‡§¶ ‡§Æ‡§æ‡§Ç‡§ó‡§§‡§æ ‡§π‡•à?'
        },
        enabled: true
      },
      {
        id: 2,
        questionText: {
          english: 'Do you feel that because of the time you spend with your relative you don\'t have enough time for yourself?',
          kannada: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤ï‡≤∞‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤ï‡≤≥‡≥Ü‡≤Ø‡≥Å‡≤µ ‡≤∏‡≤Æ‡≤Ø‡≤¶‡≤ø‡≤Ç‡≤¶‡≤æ‡≤ó‡≤ø ‡≤®‡≤ø‡≤Æ‡≤ó‡≤æ‡≤ó‡≤ø ‡≤∏‡≤æ‡≤ï‡≤∑‡≥ç‡≤ü‡≥Å ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤ ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤≠‡≤æ‡≤µ‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤æ?',
          hindi: '‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§∞‡§ø‡§∂‡•ç‡§§‡•á‡§¶‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§ø‡§§‡§æ‡§è ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§∏‡§Æ‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à?'
        },
        enabled: true
      }
    ]
  };

  try {
    console.log('üì§ Sending test data to API...');
    console.log('Questions structure:', JSON.stringify(testData.burdenTestQuestions[0], null, 2));
    console.log('Video config structure:', JSON.stringify(testData.day1Config.mild, null, 2));
    
    // Test the data structure validation
    for (const question of testData.burdenTestQuestions) {
      if (!question.questionText.english) {
        throw new Error(`Question ${question.id} missing questionText.english`);
      }
    }
    
    console.log('‚úÖ Data structure validation passed');
    console.log('üìä Summary:');
    console.log(`- Questions: ${testData.burdenTestQuestions.length}`);
    console.log(`- Video levels: ${Object.keys(testData.day1Config).length}`);
    console.log(`- All questions have required english text: ${testData.burdenTestQuestions.every(q => q.questionText.english)}`);
    
    return testData;
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    throw error;
  }
};

// Export for use or run directly
if (require.main === module) {
  testDay1Configuration()
    .then(data => {
      console.log('‚úÖ Test completed successfully');
    })
    .catch(error => {
      console.error('‚ùå Test failed:', error.message);
      process.exit(1);
    });
}

module.exports = { testDay1Configuration };