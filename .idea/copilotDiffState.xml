<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pages/api/interview/submit-tracking.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pages/api/interview/submit-tracking.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import dbConnect from '../../../lib/mongodb';&#10;&#10;// Interview tracking schema (we'll store this in a simple collection)&#10;const InterviewTracking = {&#10;  async create(data) {&#10;    const { db } = await dbConnect();&#10;    const collection = db.collection('interview_tracking');&#10;    return await collection.insertOne({&#10;      ...data,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date()&#10;    });&#10;  },&#10;&#10;  async findByUserId(userId) {&#10;    const { db } = await dbConnect();&#10;    const collection = db.collection('interview_tracking');&#10;    return await collection.find({ userId }).sort({ createdAt: -1 }).toArray();&#10;  }&#10;};&#10;&#10;export default async function handler(req, res) {&#10;  if (req.method !== 'POST') {&#10;    return res.status(405).json({ message: 'Method not allowed' });&#10;  }&#10;&#10;  try {&#10;    const {&#10;      userId,&#10;      startTime,&#10;      endTime,&#10;      totalDuration,&#10;      focusStats,&#10;      fullscreenStats,&#10;      interviewType = 'general'&#10;    } = req.body;&#10;&#10;    // Validate required fields&#10;    if (!startTime || !endTime) {&#10;      return res.status(400).json({ &#10;        success: false, &#10;        message: 'Start time and end time are required' &#10;      });&#10;    }&#10;&#10;    // Calculate additional metrics&#10;    const totalOutOfFocusPercentage = totalDuration &gt; 0 &#10;      ? ((focusStats.totalOutOfFocusDuration / totalDuration) * 100).toFixed(2)&#10;      : 0;&#10;&#10;    const averageOutOfFocusDuration = focusStats.outOfFocusCount &gt; 0&#10;      ? (focusStats.totalOutOfFocusDuration / focusStats.outOfFocusCount)&#10;      : 0;&#10;&#10;    // Prepare tracking data&#10;    const trackingData = {&#10;      userId: userId || 'anonymous',&#10;      interviewType,&#10;      session: {&#10;        startTime: new Date(startTime),&#10;        endTime: new Date(endTime),&#10;        totalDuration,&#10;        totalDurationFormatted: formatDuration(totalDuration)&#10;      },&#10;      focusTracking: {&#10;        ...focusStats,&#10;        totalOutOfFocusPercentage: parseFloat(totalOutOfFocusPercentage),&#10;        averageOutOfFocusDuration,&#10;        focusScore: calculateFocusScore(focusStats, totalDuration)&#10;      },&#10;      fullscreenTracking: {&#10;        ...fullscreenStats,&#10;        fullscreenComplianceScore: calculateFullscreenScore(fullscreenStats)&#10;      },&#10;      overallScore: calculateOverallScore(focusStats, fullscreenStats, totalDuration),&#10;      metadata: {&#10;        userAgent: req.headers['user-agent'],&#10;        ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,&#10;        timestamp: new Date()&#10;      }&#10;    };&#10;&#10;    // Save to database&#10;    const result = await InterviewTracking.create(trackingData);&#10;&#10;    console.log('Interview tracking data saved:', {&#10;      id: result.insertedId,&#10;      userId: trackingData.userId,&#10;      focusScore: trackingData.focusTracking.focusScore,&#10;      overallScore: trackingData.overallScore&#10;    });&#10;&#10;    res.status(200).json({&#10;      success: true,&#10;      message: 'Interview tracking data saved successfully',&#10;      data: {&#10;        trackingId: result.insertedId,&#10;        focusScore: trackingData.focusTracking.focusScore,&#10;        fullscreenScore: trackingData.fullscreenTracking.fullscreenComplianceScore,&#10;        overallScore: trackingData.overallScore,&#10;        summary: {&#10;          totalDuration: formatDuration(totalDuration),&#10;          outOfFocusCount: focusStats.outOfFocusCount,&#10;          totalOutOfFocusDuration: formatDuration(focusStats.totalOutOfFocusDuration),&#10;          fullscreenExitCount: fullscreenStats.fullscreenExitCount,&#10;          outOfFocusPercentage: `${totalOutOfFocusPercentage}%`&#10;        }&#10;      }&#10;    });&#10;&#10;  } catch (error) {&#10;    console.error('Error saving interview tracking data:', error);&#10;    res.status(500).json({&#10;      success: false,&#10;      message: 'Failed to save interview tracking data',&#10;      error: error.message&#10;    });&#10;  }&#10;}&#10;&#10;// Helper functions&#10;function formatDuration(milliseconds) {&#10;  const totalSeconds = Math.floor(milliseconds / 1000);&#10;  const hours = Math.floor(totalSeconds / 3600);&#10;  const minutes = Math.floor((totalSeconds % 3600) / 60);&#10;  const seconds = totalSeconds % 60;&#10;  &#10;  if (hours &gt; 0) {&#10;    return `${hours}h ${minutes}m ${seconds}s`;&#10;  } else if (minutes &gt; 0) {&#10;    return `${minutes}m ${seconds}s`;&#10;  } else {&#10;    return `${seconds}s`;&#10;  }&#10;}&#10;&#10;function calculateFocusScore(focusStats, totalDuration) {&#10;  if (totalDuration === 0) return 100;&#10;  &#10;  const outOfFocusPercentage = (focusStats.totalOutOfFocusDuration / totalDuration) * 100;&#10;  const focusScore = Math.max(0, 100 - outOfFocusPercentage);&#10;  &#10;  // Additional penalties for frequent focus losses&#10;  const frequencyPenalty = Math.min(20, focusStats.outOfFocusCount * 2);&#10;  &#10;  return Math.max(0, focusScore - frequencyPenalty);&#10;}&#10;&#10;function calculateFullscreenScore(fullscreenStats) {&#10;  // Start with 100 and deduct points for each exit&#10;  const baseScore = 100;&#10;  const penaltyPerExit = 10;&#10;  const score = Math.max(0, baseScore - (fullscreenStats.fullscreenExitCount * penaltyPerExit));&#10;  &#10;  return score;&#10;}&#10;&#10;function calculateOverallScore(focusStats, fullscreenStats, totalDuration) {&#10;  const focusScore = calculateFocusScore(focusStats, totalDuration);&#10;  const fullscreenScore = calculateFullscreenScore(fullscreenStats);&#10;  &#10;  // Weighted average: 70% focus, 30% fullscreen&#10;  const overallScore = (focusScore * 0.7) + (fullscreenScore * 0.3);&#10;  &#10;  return Math.round(overallScore);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pages/onboarding.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pages/onboarding.js" />
              <option name="originalContent" value="import { useState, useEffect } from 'react';&#10;import {&#10;  Box,&#10;  TextField,&#10;  Container,&#10;  Typography,&#10;  Button,&#10;  Card,&#10;  CardContent,&#10;  Grid,&#10;  IconButton,&#10;  Stepper,&#10;  Step,&#10;  StepLabel,&#10;  Checkbox,&#10;  FormControlLabel&#10;} from '@mui/material';&#10;import { motion, AnimatePresence } from 'framer-motion';&#10;import {&#10;  FaUserMd,&#10;  FaUser,&#10;  FaArrowRight,&#10;  FaArrowLeft,&#10;  FaSun,&#10;  FaMoon,&#10;  FaHeart&#10;} from 'react-icons/fa';&#10;import { useTheme } from '../contexts/ThemeContext';&#10;import { useRouter } from 'next/router';&#10;&#10;import ConsentForm from '../components/ConsentForm';&#10;import CaregiverQuestions from '../components/CaregiverQuestions';&#10;&#10;const steps = ['Choose Role', 'Consent Form', 'Demographic Questions', 'Complete Registration'];&#10;&#10;export default function Onboarding() {&#10;  const { isDarkMode, toggleTheme } = useTheme();&#10;  const [activeStep, setActiveStep] = useState(0);&#10;  const [userType, setUserType] = useState('');&#10;  const [formData, setFormData] = useState({});&#10;  const [consentAccepted, setConsentAccepted] = useState(false);&#10;  const router = useRouter();&#10;&#10;  const handleUserTypeSelection = (type) =&gt; {&#10;    setUserType(type);&#10;    setActiveStep(1);&#10;  };&#10;&#10;  const handleBack = () =&gt; {&#10;    if (activeStep === 1) {&#10;      setActiveStep(0);&#10;      setUserType('');&#10;    }&#10;  };&#10;&#10;  const UserTypeSelection = () =&gt; (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, y: 50 }}&#10;      animate={{ opacity: 1, y: 0 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Box textAlign=&quot;center&quot; sx={{ mb: 6 }}&gt;&#10;        &lt;Typography&#10;          variant=&quot;h3&quot;&#10;          sx={{&#10;            mb: 2,&#10;            fontWeight: 700,&#10;            background: 'linear-gradient(45deg, #2563eb, #7c3aed)',&#10;            backgroundClip: 'text',&#10;            WebkitBackgroundClip: 'text',&#10;            WebkitTextFillColor: 'transparent',&#10;          }}&#10;        &gt;&#10;          Welcome to Cancer Care Support&#10;        &lt;/Typography&gt;&#10;        &lt;Typography&#10;          variant=&quot;h6&quot;&#10;          color=&quot;text.secondary&quot;&#10;          sx={{ maxWidth: 600, mx: 'auto' }}&#10;        &gt;&#10;          Please select your role to begin the onboarding process&#10;        &lt;/Typography&gt;&#10;      &lt;/Box&gt;&#10;&#10;      &lt;Grid container spacing={4} justifyContent=&quot;center&quot;&gt;&#10;        &lt;Grid item xs={12} sm={6} md={5}&gt;&#10;          &lt;motion.div&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            whileTap={{ scale: 0.98 }}&#10;          &gt;&#10;            &lt;Card&#10;              onClick={() =&gt; handleUserTypeSelection('caregiver')}&#10;              sx={{&#10;                cursor: 'pointer',&#10;                height: 280,&#10;                display: 'flex',&#10;                flexDirection: 'column',&#10;                justifyContent: 'center',&#10;                alignItems: 'center',&#10;                textAlign: 'center',&#10;                background: 'linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%)',&#10;                color: 'white',&#10;                transition: 'all 0.3s ease',&#10;                '&amp;:hover': {&#10;                  boxShadow: '0 20px 40px rgba(37, 99, 235, 0.3)',&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;CardContent&gt;&#10;                &lt;FaUserMd style={{ fontSize: '4rem', marginBottom: '1rem' }} /&gt;&#10;                &lt;Typography variant=&quot;h4&quot; sx={{ mb: 2, fontWeight: 600 }}&gt;&#10;                  Caregiver&#10;                &lt;/Typography&gt;&#10;                &lt;Typography variant=&quot;body1&quot; sx={{ opacity: 0.9 }}&gt;&#10;                  I'm here to provide support and care to a cancer patient&#10;                &lt;/Typography&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/motion.div&gt;&#10;        &lt;/Grid&gt;&#10;&#10;        &lt;Grid item xs={12} sm={6} md={5}&gt;&#10;          &lt;motion.div&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            whileTap={{ scale: 0.98 }}&#10;          &gt;&#10;            &lt;Card&#10;              onClick={() =&gt; handleUserTypeSelection('patient')}&#10;              sx={{&#10;                cursor: 'pointer',&#10;                height: 280,&#10;                display: 'flex',&#10;                flexDirection: 'column',&#10;                justifyContent: 'center',&#10;                alignItems: 'center',&#10;                textAlign: 'center',&#10;                background: 'linear-gradient(135deg, #7c3aed 0%, #5b21b6 100%)',&#10;                color: 'white',&#10;                transition: 'all 0.3s ease',&#10;                '&amp;:hover': {&#10;                  boxShadow: '0 20px 40px rgba(124, 58, 237, 0.3)',&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;CardContent&gt;&#10;                &lt;FaUser style={{ fontSize: '4rem', marginBottom: '1rem' }} /&gt;&#10;                &lt;Typography variant=&quot;h4&quot; sx={{ mb: 2, fontWeight: 600 }}&gt;&#10;                  Patient&#10;                &lt;/Typography&gt;&#10;                &lt;Typography variant=&quot;body1&quot; sx={{ opacity: 0.9 }}&gt;&#10;                  I'm a cancer patient seeking support and care&#10;                &lt;/Typography&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/motion.div&gt;&#10;        &lt;/Grid&gt;&#10;      &lt;/Grid&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;&#10;  const QuestionnaireForm = () =&gt; {&#10;    if (userType === 'caregiver') {&#10;      return &lt;CaregiverForm formData={formData} setFormData={setFormData} onNext={() =&gt; setActiveStep(2)} /&gt;;&#10;    } else {&#10;      return &lt;PatientForm formData={formData} setFormData={setFormData} onNext={() =&gt; setActiveStep(2)} /&gt;;&#10;    }&#10;  };&#10;&#10;  const ConsentForm = ({ userType, onAccept, formData }) =&gt; {&#10;  const [accepted, setAccepted] = useState(false);&#10;  const [declined, setDeclined] = useState(false);&#10;  const router = useRouter();&#10;&#10;  const studyDetails = {&#10;    title: &quot;The Impact of a Nurse-led Family Caregiver Program Among Cancer Patients at a Tertiary Care Hospital in Bangalore.&quot;,&#10;    investigator: {&#10;      name: &quot;MR. James Raj K&quot;,&#10;      role: &quot;PHD Scholar&quot;,&#10;      institution: &quot;KLE Institute of Nursing Science, Belgaum&quot;,&#10;      contact: &quot;9500482944&quot;&#10;    },&#10;    purpose: &quot;The purpose of this study is to evaluate the impact of a nurse-led family caregiver program on alleviating caregiver burden, improving quality of life, and reducing stress among cancer patients and their caregivers.&quot;,&#10;    procedures: [&#10;      &quot;Pre-test Assessment: to assess baseline caregiver burden, quality of life, and stress levels using standardized tools.&quot;,&#10;      &quot;Intervention: Participation in a nurse-led family caregiver program designed to address areas identified in the pre-test.&quot;,&#10;      &quot;Immediate Post-test Assessment: immediately following the intervention to reassess caregiver burden, quality of life, and stress levels.&quot;,&#10;      &quot;Follow-up Post-test Assessment: 12 weeks after the intervention to assess the long-term impact on caregiver burden, quality of life, and stress levels.&quot;&#10;    ],&#10;    duration: &quot;Participation will last approximately 12 weeks, including the pre-test, intervention, and the two post-test assessments.&quot;,&#10;    risks: [&#10;      &quot;There may be some emotional discomfort when discussing personal experiences and stressors.&quot;,&#10;      &quot;Participation in the program requires a time commitment that might be challenging for some caregivers.&quot;&#10;    ],&#10;    benefits: [&#10;      &quot;Potential improvement in caregiver burden, quality of life, and stress levels.&quot;,&#10;      &quot;Contribution to research that may help other caregivers in the future.&quot;&#10;    ]&#10;  };&#10;&#10;  const handleConsent = () =&gt; {&#10;    if (accepted) {&#10;      onAccept(); // This will trigger setActiveStep(2) to show demographic questions&#10;    }&#10;  };&#10;&#10;  const handleDecline = () =&gt; {&#10;    setDeclined(true);&#10;  };&#10;&#10;  if (declined) {&#10;    return (&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 50 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ duration: 0.6 }}&#10;      &gt;&#10;        &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4, textAlign: 'center' }}&gt;&#10;          &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3 }}&gt;&#10;            Thank you for your response&#10;          &lt;/Typography&gt;&#10;          &lt;Typography variant=&quot;body1&quot; sx={{ mb: 4 }}&gt;&#10;            Take your time and come back when you're ready.&#10;          &lt;/Typography&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            onClick={() =&gt; router.push('/')}&#10;          &gt;&#10;            Return to Home&#10;          &lt;/Button&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/motion.div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, y: 50 }}&#10;      animate={{ opacity: 1, y: 0 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 800, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h4&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Consent Form&#10;        &lt;/Typography&gt;&#10;        &#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 2 }}&gt;&#10;          Title of Study:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.title}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Principal Investigator:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.investigator.name}&lt;br /&gt;&#10;          {studyDetails.investigator.role}&lt;br /&gt;&#10;          {studyDetails.investigator.institution}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Purpose of the Study:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.purpose}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Study Procedures:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.procedures.map((proc, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {proc}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Duration:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.duration}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Risks and Discomforts:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.risks.map((risk, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {risk}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Benefits:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.benefits.map((benefit, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {benefit}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Contact Information:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          For questions or concerns, contact:&lt;br /&gt;&#10;          {studyDetails.investigator.name}&lt;br /&gt;&#10;          {studyDetails.investigator.role}&lt;br /&gt;&#10;          {studyDetails.investigator.institution}&lt;br /&gt;&#10;          Mob: {studyDetails.investigator.contact}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          &lt;FormControlLabel&#10;            control={&#10;              &lt;Checkbox &#10;                checked={accepted}&#10;                onChange={(e) =&gt; setAccepted(e.target.checked)}&#10;              /&gt;&#10;            }&#10;            label=&quot;I have read and understood the information above. I voluntarily agree to participate in this study and understand I can withdraw at any time without penalty.&quot;&#10;          /&gt;&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            color=&quot;error&quot;&#10;            onClick={handleDecline}&#10;          &gt;&#10;            Decline&#10;          &lt;/Button&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            disabled={!accepted}&#10;            onClick={handleConsent}&#10;          &gt;&#10;            Accept and Continue to Login&#10;          &lt;/Button&gt;&#10;        &lt;/Box&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;const CompletionStep = ({ formData }) =&gt; {&#10;  const router = useRouter();&#10;  const [countdown, setCountdown] = useState(5);&#10;&#10;  useEffect(() =&gt; {&#10;    // Only start countdown if we have the required data&#10;    if (formData?.generatedId &amp;&amp; formData?.userType) {&#10;      const timer = setInterval(() =&gt; {&#10;        setCountdown((prev) =&gt; {&#10;          if (prev &lt;= 1) {&#10;            // Redirect to login with pre-filled data&#10;            router.push(`/login?userId=${formData.generatedId}&amp;userType=${formData.userType}&amp;auto=true`);&#10;            return 0;&#10;          }&#10;          return prev - 1;&#10;        });&#10;      }, 1000);&#10;&#10;      return () =&gt; clearInterval(timer);&#10;    }&#10;  }, [formData?.generatedId, formData?.userType, router]);&#10;&#10;  const handleLoginNow = () =&gt; {&#10;    if (formData?.generatedId &amp;&amp; formData?.userType) {&#10;      router.push(`/login?userId=${formData.generatedId}&amp;userType=${formData.userType}&amp;auto=true`);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, scale: 0.8 }}&#10;      animate={{ opacity: 1, scale: 1 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Box textAlign=&quot;center&quot;&gt;&#10;        &lt;FaHeart style={{ fontSize: '4rem', color: '#ef4444', marginBottom: '2rem' }} /&gt;&#10;        &lt;Typography variant=&quot;h3&quot; sx={{ mb: 2, fontWeight: 700 }}&gt;&#10;          Registration Complete!&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;h6&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;          Your account has been created successfully. You will be automatically redirected to login.&#10;        &lt;/Typography&gt;&#10;        {formData?.generatedId ? (&#10;          &lt;&gt;&#10;            &lt;Typography variant=&quot;body1&quot; sx={{ mb: 2, p: 3, backgroundColor: 'action.hover', borderRadius: 2 }}&gt;&#10;              &lt;strong&gt;Your ID:&lt;/strong&gt; {formData.generatedId}&#10;            &lt;/Typography&gt;&#10;            &lt;Typography variant=&quot;body2&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;              Please save this ID for future logins&#10;            &lt;/Typography&gt;&#10;            &#10;            &lt;Box sx={{ mb: 4 }}&gt;&#10;              &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;                Redirecting to login in {countdown} seconds...&#10;              &lt;/Typography&gt;&#10;              &lt;Button&#10;                variant=&quot;contained&quot;&#10;                size=&quot;large&quot;&#10;                onClick={handleLoginNow}&#10;                sx={{ px: 4, py: 2, mr: 2 }}&#10;              &gt;&#10;                Login Now&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                variant=&quot;outlined&quot;&#10;                size=&quot;large&quot;&#10;                onClick={() =&gt; router.push('/')}&#10;                sx={{ px: 4, py: 2 }}&#10;              &gt;&#10;                Back to Home&#10;              &lt;/Button&gt;&#10;            &lt;/Box&gt;&#10;          &lt;/&gt;&#10;        ) : (&#10;          &lt;Box sx={{ mb: 4 }}&gt;&#10;            &lt;Typography variant=&quot;body1&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;              Registration completed successfully!&#10;            &lt;/Typography&gt;&#10;            &lt;Button&#10;              variant=&quot;contained&quot;&#10;              size=&quot;large&quot;&#10;              onClick={() =&gt; router.push('/login')}&#10;              sx={{ px: 4, py: 2, mr: 2 }}&#10;            &gt;&#10;              Go to Login&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              variant=&quot;outlined&quot;&#10;              size=&quot;large&quot;&#10;              onClick={() =&gt; router.push('/')}&#10;              sx={{ px: 4, py: 2 }}&#10;            &gt;&#10;              Back to Home&#10;            &lt;/Button&gt;&#10;          &lt;/Box&gt;&#10;        )}&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;  return (&#10;    &lt;Box sx={{&#10;      minHeight: '100vh',&#10;      backgroundColor: 'background.default',&#10;      py: 4&#10;    }}&gt;&#10;      {/* Header */}&#10;      &lt;Box sx={{&#10;        position: 'absolute',&#10;        top: 20,&#10;        right: 20,&#10;        zIndex: 1000&#10;      }}&gt;&#10;        &lt;IconButton onClick={toggleTheme}&gt;&#10;          {isDarkMode ? &lt;FaSun /&gt; : &lt;FaMoon /&gt;}&#10;        &lt;/IconButton&gt;&#10;      &lt;/Box&gt;&#10;&#10;      &lt;Container maxWidth=&quot;lg&quot;&gt;&#10;        {/* Stepper */}&#10;        &lt;Box sx={{ mb: 6 }}&gt;&#10;          &lt;Stepper activeStep={activeStep} alternativeLabel&gt;&#10;            {steps.map((label) =&gt; (&#10;              &lt;Step key={label}&gt;&#10;                &lt;StepLabel&gt;{label}&lt;/StepLabel&gt;&#10;              &lt;/Step&gt;&#10;            ))}&#10;          &lt;/Stepper&gt;&#10;        &lt;/Box&gt;&#10;&#10;        {/* Content */}&#10;        &lt;AnimatePresence mode=&quot;wait&quot;&gt;&#10;          {activeStep === 0 &amp;&amp; &lt;UserTypeSelection /&gt;}&#10;          {activeStep === 1 &amp;&amp; (&#10;            &lt;ConsentForm &#10;              userType={userType} &#10;              formData={formData}&#10;              onAccept={() =&gt; {&#10;                setConsentAccepted(true);&#10;                setActiveStep(2);&#10;              }} &#10;            /&gt;&#10;          )}&#10;          {activeStep === 2 &amp;&amp; (&#10;            userType === 'caregiver' ? &#10;              &lt;CaregiverForm &#10;                formData={formData} &#10;                setFormData={setFormData} &#10;                onNext={() =&gt; setActiveStep(3)} &#10;                onBack={() =&gt; setActiveStep(1)}&#10;                consentAccepted={consentAccepted}&#10;              /&gt; :&#10;              &lt;PatientForm &#10;                formData={formData} &#10;                setFormData={setFormData} &#10;                onNext={() =&gt; setActiveStep(3)} &#10;                onBack={() =&gt; setActiveStep(1)}&#10;                consentAccepted={consentAccepted}&#10;              /&gt;&#10;          )}&#10;          {activeStep === 3 &amp;&amp; &lt;CompletionStep formData={formData} /&gt;}&#10;        &lt;/AnimatePresence&gt;&#10;&#10;&#10;      &lt;/Container&gt;&#10;    &lt;/Box&gt;&#10;  );&#10;}&#10;&#10;// Caregiver Form Component&#10;function CaregiverForm({ formData, setFormData, onNext, onBack, consentAccepted }) {&#10;  const [currentQuestion, setCurrentQuestion] = useState(0);&#10;  const [answers, setAnswers] = useState({});&#10;&#10;  const handleSubmitAnswer = (value) =&gt; {&#10;    const currentQ = questions[currentQuestion];&#10;    let finalValue = value;&#10;&#10;    // Handle 'Other' option for fields that allow it&#10;    if (currentQ.allowOther &amp;&amp; value === 'Other') {&#10;      finalValue = answers[`${currentQ.id}Other`] || 'Other';&#10;    }&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `CG${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...answers, [currentQ.id]: finalValue, userType: 'caregiver', generatedId });&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const questions = [&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'name',&#10;      question: 'What is your full name?',&#10;      type: 'text',&#10;      placeholder: 'Enter your full name',&#10;      pattern: '^[a-zA-Z ]+$',&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'phone',&#10;      question: 'What is your phone number?',&#10;      type: 'tel',&#10;      placeholder: 'Enter your phone number',&#10;      pattern: '^[0-9]{10}$',&#10;      required: true&#10;    },&#10;&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'age',&#10;      question: 'Age (in years):',&#10;      type: 'radio',&#10;      options: ['18-30', '31-40', '41-50', '51-60', '61 and above'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;  &#10;    {&#10;      section: 'Personal Details',&#10;      id: 'gender',&#10;      question: 'Gender:',&#10;      type: 'radio',&#10;      options: ['Male', 'Female', 'Non-binary', 'Prefer not to say', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'maritalStatus',&#10;      question: 'Marital Status:',&#10;      type: 'radio',&#10;      options: ['Single', 'Married', 'Widowed', 'Divorced', 'Separated'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'educationLevel',&#10;      question: 'Educational Level:',&#10;      type: 'radio',&#10;      options: ['No formal education', 'Primary education', 'Secondary education', 'Higher secondary', 'Undergraduate degree', 'Postgraduate degree'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'employmentStatus',&#10;      question: 'Employment Status:',&#10;      type: 'radio',&#10;      options: ['Full-time employed', 'Part-time employed', 'Self-employed', 'Unemployed', 'Retired', 'Student', 'Homemaker'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'residentialArea',&#10;      question: 'Residential Area:',&#10;      type: 'radio',&#10;      options: ['Urban', 'Rural', 'Suburban'],&#10;      required: true&#10;    },&#10;  &#10;&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'relationshipToPatient',&#10;      question: 'Relationship to the Patient:',&#10;      type: 'radio',&#10;      options: ['Spouse', 'Parent', 'Child', 'Sibling', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'hoursPerDay',&#10;      question: 'Hours Spent Caring per Day:',&#10;      type: 'radio',&#10;      options: ['Less than 2 hours', '2-4 hours', '5-8 hours', 'More than 8 hours'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'durationOfCaregiving',&#10;      question: 'Duration of Caregiving:',&#10;      type: 'radio',&#10;      options: ['Less than 6 months', '6-12 months', '1-2 years', '2-5 years', 'More than 5 years'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'previousExperience',&#10;      question: 'Previous Experience as a Caregiver:',&#10;      type: 'radio',&#10;      options: ['Yes', 'No'],&#10;      required: true&#10;    },&#10;   &#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'supportSystem',&#10;      question: 'Support System Available (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['Family Support', 'Friends', 'Community Support Groups', 'Religious/Spiritual Support', 'Professional Support Services', 'None'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Health and Well-being',&#10;      id: 'physicalHealth',&#10;      question: 'Physical Health Conditions (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['None', 'Diabetes', 'Hypertension', 'Heart Disease', 'Arthritis', 'Back Pain', 'Respiratory Issues', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Health and Well-being',&#10;      id: 'mentalHealth',&#10;      question: 'Mental Health Conditions (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['None', 'Depression', 'Anxiety', 'Stress-related disorder', 'Sleep Issues', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;  &#10;  ];&#10;&#10;  const handleAnswer = (value) =&gt; {&#10;    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };&#10;    setAnswers(newAnswers);&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `CG${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...newAnswers, userType: 'caregiver', generatedId });&#10;&#10;      // Submit to API&#10;      submitRegistration({ &#10;        ...newAnswers, &#10;        userType: 'caregiver', &#10;        caregiverId: generatedId,&#10;        consentAccepted: consentAccepted,&#10;        questionnaireAnswers: newAnswers&#10;      });&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    if (currentQuestion &gt; 0) {&#10;      setCurrentQuestion(currentQuestion - 1);&#10;    } else {&#10;      // If on first question, go back to consent form&#10;      onBack();&#10;    }&#10;  };&#10;&#10;  const submitRegistration = async (data) =&gt; {&#10;    try {&#10;      console.log('Submitting caregiver registration data:', data);&#10;      const response = await fetch('/api/register', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(data)&#10;      });&#10;      &#10;      const result = await response.json();&#10;      console.log('Caregiver registration response:', result);&#10;      &#10;      if (!response.ok) {&#10;        throw new Error(result.message || 'Registration failed');&#10;      }&#10;      &#10;      console.log('Caregiver registration successful:', result);&#10;    } catch (error) {&#10;      console.error('Caregiver registration error:', error);&#10;      alert('Registration failed: ' + error.message);&#10;    }&#10;  };&#10;&#10;  const renderField = () =&gt; {&#10;    const question = questions[currentQuestion];&#10;    const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;    switch (question.type) {&#10;      case 'multiSelect':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; {&#10;              const isSelected = currentValue.includes(option);&#10;              const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;              &#10;              return (&#10;                &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                    onClick={() =&gt; {&#10;                      let newValue;&#10;                      if (option === 'None') {&#10;                        newValue = isSelected ? [] : ['None'];&#10;                      } else {&#10;                        if (isNoneSelected) {&#10;                          newValue = [option];&#10;                        } else {&#10;                          newValue = isSelected&#10;                            ? currentValue.filter(val =&gt; val !== option)&#10;                            : [...currentValue, option];&#10;                        }&#10;                      }&#10;                      setAnswers({ ...answers, [question.id]: newValue });&#10;                    }}&#10;                    disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                    sx={{&#10;                      p: 2,&#10;                      textAlign: 'left',&#10;                      backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                      color: isSelected ? 'white' : 'inherit',&#10;                      '&amp;:hover': isSelected &#10;                        ? { backgroundColor: 'primary.dark' }&#10;                        : { backgroundColor: 'primary.main', color: 'white' }&#10;                    }}&#10;                  &gt;&#10;                    {option}&#10;                  &lt;/Button&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;            })}&#10;            {question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify other condition&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  onKeyPress={(e) =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                      e.preventDefault();&#10;                      // Replace &quot;Other&quot; with the custom text in the current value&#10;                      let finalValue = currentValue.map(val =&gt; &#10;                        val === 'Other' ? e.target.value.trim() : val&#10;                      );&#10;                      handleAnswer(finalValue);&#10;                    }&#10;                  }}&#10;                  sx={{ mt: 2 }}&#10;                  label=&quot;Please specify&quot;&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;            &lt;Grid item xs={12}&gt;&#10;              &lt;Button&#10;                fullWidth&#10;                variant=&quot;contained&quot;&#10;                onClick={() =&gt; {&#10;                  let finalValue = currentValue;&#10;                  // If &quot;Other&quot; is selected and there's text in the other field, replace &quot;Other&quot; with the custom text&#10;                  if (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; answers[`${question.id}Other`]) {&#10;                    finalValue = currentValue.map(val =&gt; &#10;                      val === 'Other' ? answers[`${question.id}Other`] : val&#10;                    );&#10;                  }&#10;                  handleAnswer(finalValue);&#10;                }}&#10;                disabled={!currentValue.length || (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; !answers[`${question.id}Other`])}&#10;                sx={{ mt: 2 }}&#10;              &gt;&#10;                {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;              &lt;/Button&gt;&#10;            &lt;/Grid&gt;&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'radio':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; (&#10;              &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                &lt;Button&#10;                  fullWidth&#10;                  variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                  onClick={() =&gt; handleAnswer(option)}&#10;                  sx={{&#10;                    p: 2,&#10;                    textAlign: 'left',&#10;                    backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                    color: currentValue === option ? 'white' : 'inherit',&#10;                    '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                  }}&#10;                &gt;&#10;                  {option}&#10;                &lt;/Button&gt;&#10;              &lt;/Grid&gt;&#10;            ))}&#10;            {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  onKeyPress={(e) =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                      e.preventDefault();&#10;                      handleAnswer(e.target.value.trim());&#10;                    }&#10;                  }}&#10;                  sx={{ mt: 2 }}&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'textarea':&#10;        return (&#10;          &lt;TextField&#10;            fullWidth&#10;            multiline&#10;            rows={4}&#10;            placeholder={question.placeholder}&#10;            value={currentValue}&#10;            onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            onKeyPress={(e) =&gt; {&#10;              if (e.key === 'Enter' &amp;&amp; !e.shiftKey &amp;&amp; e.target.value.trim()) {&#10;                e.preventDefault();&#10;                handleAnswer(e.target.value.trim());&#10;              }&#10;            }}&#10;          /&gt;&#10;        );&#10;&#10;      default:&#10;        return (&#10;          &lt;TextField&#10;            fullWidth&#10;            type={question.type}&#10;            placeholder={question.placeholder}&#10;            value={currentValue}&#10;            inputProps={{&#10;              min: question.min,&#10;              max: question.max,&#10;              pattern: question.pattern&#10;            }}&#10;            onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            onKeyPress={(e) =&gt; {&#10;              if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                e.preventDefault();&#10;                handleAnswer(e.target.value.trim());&#10;              }&#10;            }}&#10;          /&gt;&#10;        );&#10;    }&#10;  };&#10;&#10;  const renderQuestionField = () =&gt; {&#10;    const question = questions[currentQuestion];&#10;    const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;    switch (question.type) {&#10;      case 'multiSelect':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; {&#10;              const isSelected = currentValue.includes(option);&#10;              const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;              &#10;              return (&#10;                &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                    onClick={() =&gt; {&#10;                      let newValue;&#10;                      if (option === 'None') {&#10;                        newValue = isSelected ? [] : ['None'];&#10;                      } else {&#10;                        if (isNoneSelected) {&#10;                          newValue = [option];&#10;                        } else {&#10;                          newValue = isSelected&#10;                            ? currentValue.filter(val =&gt; val !== option)&#10;                            : [...currentValue, option];&#10;                        }&#10;                      }&#10;                      setAnswers({ ...answers, [question.id]: newValue });&#10;                    }}&#10;                    disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                    sx={{&#10;                      p: 2,&#10;                      textAlign: 'left',&#10;                      backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                      color: isSelected ? 'white' : 'inherit',&#10;                      '&amp;:hover': isSelected &#10;                        ? { backgroundColor: 'primary.dark' }&#10;                        : { backgroundColor: 'primary.main', color: 'white' }&#10;                    }}&#10;                  &gt;&#10;                    {option}&#10;                  &lt;/Button&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;            })}&#10;            &lt;Grid item xs={12}&gt;&#10;              &lt;Button&#10;                fullWidth&#10;                variant=&quot;contained&quot;&#10;                onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;                disabled={!currentValue.length}&#10;                sx={{ mt: 2 }}&#10;              &gt;&#10;                {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;              &lt;/Button&gt;&#10;            &lt;/Grid&gt;&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'radio':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; (&#10;              &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                &lt;Button&#10;                  fullWidth&#10;                  variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                  onClick={() =&gt; handleSubmitAnswer(option)}&#10;                  sx={{&#10;                    p: 2,&#10;                    textAlign: 'left',&#10;                    backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                    color: currentValue === option ? 'white' : 'inherit',&#10;                    '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                  }}&#10;                &gt;&#10;                  {option}&#10;                &lt;/Button&gt;&#10;              &lt;/Grid&gt;&#10;            ))}&#10;            {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  sx={{ mt: 2 }}&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'textarea':&#10;        return (&#10;          &lt;&gt;&#10;            &lt;TextField&#10;              fullWidth&#10;              multiline&#10;              rows={4}&#10;              placeholder={question.placeholder}&#10;              value={currentValue}&#10;              onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            /&gt;&#10;            &lt;Button&#10;              fullWidth&#10;              variant=&quot;contained&quot;&#10;              onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;              disabled={!currentValue.trim()}&#10;              sx={{ mt: 2 }}&#10;            &gt;&#10;              {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;            &lt;/Button&gt;&#10;          &lt;/&gt;&#10;        );&#10;&#10;      default:&#10;        return (&#10;          &lt;&gt;&#10;            &lt;TextField&#10;              fullWidth&#10;              type={question.type}&#10;              placeholder={question.placeholder}&#10;              value={currentValue}&#10;              inputProps={{&#10;                min: question.min,&#10;                max: question.max,&#10;                pattern: question.pattern&#10;              }}&#10;              onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            /&gt;&#10;            &lt;Button&#10;              fullWidth&#10;              variant=&quot;contained&quot;&#10;              onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;              disabled={!currentValue.trim()}&#10;              sx={{ mt: 2 }}&#10;            &gt;&#10;              {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;            &lt;/Button&gt;&#10;          &lt;/&gt;&#10;        );&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      key={currentQuestion}&#10;      initial={{ opacity: 0, x: 50 }}&#10;      animate={{ opacity: 1, x: 0 }}&#10;      exit={{ opacity: 0, x: -50 }}&#10;      transition={{ duration: 0.4 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Question {currentQuestion + 1} of {questions.length}&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 4 }}&gt;&#10;          {questions[currentQuestion].question}&#10;        &lt;/Typography&gt;&#10;        {renderQuestionField()}&#10;      &lt;/Card&gt;&#10;      &#10;      {/* Back Button - Outside the card */}&#10;      &lt;Box sx={{ display: 'flex', justifyContent: 'flex-start', mt: 3, maxWidth: 600, mx: 'auto' }}&gt;&#10;        &lt;Button&#10;          startIcon={&lt;FaArrowLeft /&gt;}&#10;          onClick={handlePrevious}&#10;          variant=&quot;outlined&quot;&#10;          sx={{ mr: 2 }}&#10;        &gt;&#10;          {currentQuestion === 0 ? 'Back to Consent Form' : 'Previous Question'}&#10;        &lt;/Button&gt;&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;// Patient Form Component&#10;const PatientForm = ({ formData, setFormData, onNext, onBack, consentAccepted }) =&gt; {&#10;  const [currentQuestion, setCurrentQuestion] = useState(0);&#10;  const [answers, setAnswers] = useState({});&#10;&#10;  const questions = [&#10;    // Basic Information&#10;    {&#10;      id: 'name',&#10;      question: 'What is your full name?',&#10;      type: 'text',&#10;      section: 'Basic Information',&#10;      required: true&#10;    },&#10;    {&#10;      id: 'phone',&#10;      question: 'What is your phone number?',&#10;      type: 'tel',&#10;      section: 'Basic Information',&#10;      required: true&#10;    },&#10;&#10;    // Section I: Demographic Questions&#10;    {&#10;      id: 'age',&#10;      question: '1. Age (in years):',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['18-30', '31-40', '41-50', '51-60', '61 and above'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'gender',&#10;      question: '2. Gender:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Male', 'Female', 'Other'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'maritalStatus',&#10;      question: '3. Marital Status:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Single', 'Married', 'Widowed', 'Divorced', 'Separated'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'educationLevel',&#10;      question: '4. Educational Level:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['No formal education', 'Primary education', 'Secondary education', 'Higher secondary', 'Undergraduate degree', 'Postgraduate degree'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'employmentStatus',&#10;      question: '5. Employment Status:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Employed (Full-time/Part-time)', 'Unemployed', 'Retired', 'Homemaker', 'Student'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'residentialArea',&#10;      question: '6. Residential Area:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Urban', 'Rural'],&#10;      required: true&#10;    },&#10;&#10;    // Section II: Medical Information&#10;    {&#10;      id: 'cancerType',&#10;      question: '7. Type of Cancer:',&#10;      type: 'text',&#10;      section: 'Medical Information',&#10;      placeholder: 'Please specify your cancer type',&#10;      required: true&#10;    },&#10;    {&#10;      id: 'cancerStage',&#10;      question: '8. Stage of Cancer:',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Stage I', 'Stage II', 'Stage III', 'Stage IV'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'treatmentModality',&#10;      question: '9. Current Treatment Modality (check all that apply):',&#10;      type: 'multiSelect',&#10;      section: 'Medical Information',&#10;      options: ['Chemotherapy', 'Radiation Therapy', 'Surgery', 'Immunotherapy', 'Hormone Therapy', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      id: 'illnessDuration',&#10;      question: '10. Duration of Illness (since diagnosis):',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Less than 6 months', '6-12 months', '1-2 years', 'More than 2 years'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'comorbidities',&#10;      question: '11. Other Comorbidities (check all that apply):',&#10;      type: 'multiSelect',&#10;      section: 'Medical Information',&#10;      options: ['Diabetes', 'Hypertension', 'Cardiovascular disease', 'Respiratory Disorders', 'None', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      id: 'healthInsurance',&#10;      question: '12. Health Insurance Coverage:',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Yes - Government', 'Yes - Private', 'No'],&#10;      required: true&#10;    }&#10;  ];&#10;&#10;  const handleAnswer = (value) =&gt; {&#10;    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };&#10;    setAnswers(newAnswers);&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `PT${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...newAnswers, userType: 'patient', generatedId });&#10;&#10;      // Submit to API&#10;      submitRegistration({ &#10;        ...newAnswers, &#10;        userType: 'patient', &#10;        patientId: generatedId,&#10;        consentAccepted: !!consentAccepted,&#10;        questionnaireAnswers: newAnswers&#10;      });&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    if (currentQuestion &gt; 0) {&#10;      setCurrentQuestion(currentQuestion - 1);&#10;    } else {&#10;      // If on first question, go back to consent form&#10;      onBack();&#10;    }&#10;  };&#10;&#10;  const submitRegistration = async (data) =&gt; {&#10;    try {&#10;      console.log('Submitting patient registration data:', data);&#10;      const response = await fetch('/api/register', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(data)&#10;      });&#10;      &#10;      const result = await response.json();&#10;      console.log('Patient registration response:', result);&#10;      &#10;      if (!response.ok) {&#10;        throw new Error(result.message || 'Registration failed');&#10;      }&#10;      &#10;      console.log('Patient registration successful:', result);&#10;    } catch (error) {&#10;      console.error('Patient registration error:', error);&#10;      alert('Registration failed: ' + error.message);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      key={currentQuestion}&#10;      initial={{ opacity: 0, x: 50 }}&#10;      animate={{ opacity: 1, x: 0 }}&#10;      exit={{ opacity: 0, x: -50 }}&#10;      transition={{ duration: 0.4 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Question {currentQuestion + 1} of {questions.length}&#10;        &lt;/Typography&gt;&#10;        {questions[currentQuestion].section &amp;&amp; (&#10;          &lt;Typography variant=&quot;subtitle1&quot; sx={{ mb: 2, color: 'primary.main', textAlign: 'center', fontWeight: 600 }}&gt;&#10;            {questions[currentQuestion].section}&#10;          &lt;/Typography&gt;&#10;        )}&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 4 }}&gt;&#10;          {questions[currentQuestion].question}&#10;        &lt;/Typography&gt;&#10;&#10;        {(() =&gt; {&#10;          const question = questions[currentQuestion];&#10;          const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;          switch (question.type) {&#10;            case 'multiSelect':&#10;              return (&#10;                &lt;Grid container spacing={2}&gt;&#10;                  {question.options.map((option) =&gt; {&#10;                    const isSelected = currentValue.includes(option);&#10;                    const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;                    &#10;                    return (&#10;                      &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                        &lt;Button&#10;                          fullWidth&#10;                          variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                          onClick={() =&gt; {&#10;                            let newValue;&#10;                            if (option === 'None') {&#10;                              newValue = isSelected ? [] : ['None'];&#10;                            } else {&#10;                              if (isNoneSelected) {&#10;                                newValue = [option];&#10;                              } else {&#10;                                newValue = isSelected&#10;                                  ? currentValue.filter(val =&gt; val !== option)&#10;                                  : [...currentValue, option];&#10;                              }&#10;                            }&#10;                            setAnswers({ ...answers, [question.id]: newValue });&#10;                          }}&#10;                          disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                          sx={{&#10;                            p: 2,&#10;                            textAlign: 'left',&#10;                            backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                            color: isSelected ? 'white' : 'inherit',&#10;                            '&amp;:hover': isSelected &#10;                              ? { backgroundColor: 'primary.dark' }&#10;                              : { backgroundColor: 'primary.main', color: 'white' }&#10;                          }}&#10;                        &gt;&#10;                          {option}&#10;                        &lt;/Button&gt;&#10;                      &lt;/Grid&gt;&#10;                    );&#10;                  })}&#10;                  {question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; (&#10;                    &lt;Grid item xs={12}&gt;&#10;                      &lt;TextField&#10;                        fullWidth&#10;                        placeholder=&quot;Please specify other treatment/condition&quot;&#10;                        value={answers[`${question.id}Other`] || ''}&#10;                        onChange={(e) =&gt; setAnswers({&#10;                          ...answers,&#10;                          [`${question.id}Other`]: e.target.value&#10;                        })}&#10;                        onKeyPress={(e) =&gt; {&#10;                          if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                            e.preventDefault();&#10;                            // Replace &quot;Other&quot; with the custom text in the current value&#10;                            let finalValue = currentValue.map(val =&gt; &#10;                              val === 'Other' ? e.target.value.trim() : val&#10;                            );&#10;                            handleAnswer(finalValue);&#10;                          }&#10;                        }}&#10;                        sx={{ mt: 2 }}&#10;                        label=&quot;Please specify&quot;&#10;                      /&gt;&#10;                    &lt;/Grid&gt;&#10;                  )}&#10;                  &lt;Grid item xs={12}&gt;&#10;                    &lt;Button&#10;                      fullWidth&#10;                      variant=&quot;contained&quot;&#10;                      onClick={() =&gt; {&#10;                        let finalValue = currentValue;&#10;                        // If &quot;Other&quot; is selected and there's text in the other field, replace &quot;Other&quot; with the custom text&#10;                        if (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; answers[`${question.id}Other`]) {&#10;                          finalValue = currentValue.map(val =&gt; &#10;                            val === 'Other' ? answers[`${question.id}Other`] : val&#10;                          );&#10;                        }&#10;                        handleAnswer(finalValue);&#10;                      }}&#10;                      disabled={!currentValue.length || (currentValue.includes('Other') &amp;&amp; question.allowOther &amp;&amp; !answers[`${question.id}Other`])}&#10;                      sx={{ mt: 2 }}&#10;                    &gt;&#10;                      {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                    &lt;/Button&gt;&#10;                  &lt;/Grid&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;&#10;            case 'radio':&#10;              return (&#10;                &lt;Grid container spacing={2}&gt;&#10;                  {question.options.map((option) =&gt; (&#10;                    &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                      &lt;Button&#10;                        fullWidth&#10;                        variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                        onClick={() =&gt; {&#10;                          if (option === 'Other' &amp;&amp; question.allowOther) {&#10;                            setAnswers({ ...answers, [question.id]: option });&#10;                          } else {&#10;                            handleAnswer(option);&#10;                          }&#10;                        }}&#10;                        sx={{&#10;                          p: 2,&#10;                          textAlign: 'left',&#10;                          backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                          color: currentValue === option ? 'white' : 'inherit',&#10;                          '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                        }}&#10;                      &gt;&#10;                        {option}&#10;                      &lt;/Button&gt;&#10;                    &lt;/Grid&gt;&#10;                  ))}&#10;                  {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;                    &lt;Grid item xs={12}&gt;&#10;                      &lt;TextField&#10;                        fullWidth&#10;                        placeholder=&quot;Please specify&quot;&#10;                        value={answers[`${question.id}Other`] || ''}&#10;                        onChange={(e) =&gt; setAnswers({&#10;                          ...answers,&#10;                          [`${question.id}Other`]: e.target.value&#10;                        })}&#10;                        onKeyPress={(e) =&gt; {&#10;                          if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                            e.preventDefault();&#10;                            handleAnswer(e.target.value.trim());&#10;                          }&#10;                        }}&#10;                        sx={{ mt: 2 }}&#10;                        label=&quot;Please specify&quot;&#10;                      /&gt;&#10;                      &lt;Button&#10;                        fullWidth&#10;                        variant=&quot;contained&quot;&#10;                        onClick={() =&gt; handleAnswer(answers[`${question.id}Other`] || 'Other')}&#10;                        disabled={!answers[`${question.id}Other`]}&#10;                        sx={{ mt: 2 }}&#10;                      &gt;&#10;                        {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                      &lt;/Button&gt;&#10;                    &lt;/Grid&gt;&#10;                  )}&#10;                &lt;/Grid&gt;&#10;              );&#10;&#10;            case 'textarea':&#10;              return (&#10;                &lt;&gt;&#10;                  &lt;TextField&#10;                    fullWidth&#10;                    multiline&#10;                    rows={4}&#10;                    placeholder={question.placeholder}&#10;                    value={currentValue}&#10;                    onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;                  /&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant=&quot;contained&quot;&#10;                    onClick={() =&gt; handleAnswer((currentValue || '').trim())}&#10;                    disabled={!((currentValue || '').trim())}&#10;                    sx={{ mt: 2 }}&#10;                  &gt;&#10;                    {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                  &lt;/Button&gt;&#10;                &lt;/&gt;&#10;              );&#10;&#10;            default:&#10;              return (&#10;                &lt;&gt;&#10;                  &lt;TextField&#10;                    fullWidth&#10;                    type={question.type}&#10;                    placeholder={question.placeholder}&#10;                    value={currentValue}&#10;                    inputProps={{&#10;                      min: question.min,&#10;                      max: question.max,&#10;                      pattern: question.pattern&#10;                    }}&#10;                    onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;                  /&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant=&quot;contained&quot;&#10;                    onClick={() =&gt; handleAnswer((currentValue || '').trim())}&#10;                    disabled={!((currentValue || '').trim())}&#10;                    sx={{ mt: 2 }}&#10;                  &gt;&#10;                    {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                  &lt;/Button&gt;&#10;                &lt;/&gt;&#10;              );&#10;          }&#10;        })()}&#10;      &lt;/Card&gt;&#10;&#10;      {/* Back Button - Outside the card */}&#10;      &lt;Box sx={{ display: 'flex', justifyContent: 'flex-start', mt: 3, maxWidth: 600, mx: 'auto' }}&gt;&#10;        &lt;Button&#10;          startIcon={&lt;FaArrowLeft /&gt;}&#10;          onClick={handlePrevious}&#10;          variant=&quot;outlined&quot;&#10;          sx={{ mr: 2 }}&#10;        &gt;&#10;          {currentQuestion === 0 ? 'Back to Consent Form' : 'Previous Question'}&#10;        &lt;/Button&gt;&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from 'react';&#10;import {&#10;  Box,&#10;  TextField,&#10;  Container,&#10;  Typography,&#10;  Button,&#10;  Card,&#10;  CardContent,&#10;  Grid,&#10;  IconButton,&#10;  Stepper,&#10;  Step,&#10;  StepLabel,&#10;  Checkbox,&#10;  FormControlLabel&#10;} from '@mui/material';&#10;import { motion, AnimatePresence } from 'framer-motion';&#10;import {&#10;  FaUserMd,&#10;  FaUser,&#10;  FaArrowRight,&#10;  FaArrowLeft,&#10;  FaSun,&#10;  FaMoon,&#10;  FaHeart&#10;} from 'react-icons/fa';&#10;import { useTheme } from '../contexts/ThemeContext';&#10;import { useRouter } from 'next/router';&#10;&#10;import ConsentForm from '../components/ConsentForm';&#10;import CaregiverQuestions from '../components/CaregiverQuestions';&#10;&#10;const steps = ['Choose Role', 'Consent Form', 'Demographic Questions', 'Complete Registration'];&#10;&#10;export default function Onboarding() {&#10;  const { isDarkMode, toggleTheme } = useTheme();&#10;  const [activeStep, setActiveStep] = useState(0);&#10;  const [userType, setUserType] = useState('');&#10;  const [formData, setFormData] = useState({});&#10;  const [consentAccepted, setConsentAccepted] = useState(false);&#10;  const router = useRouter();&#10;&#10;  const handleUserTypeSelection = (type) =&gt; {&#10;    setUserType(type);&#10;    setActiveStep(1);&#10;  };&#10;&#10;  const handleBack = () =&gt; {&#10;    if (activeStep === 1) {&#10;      setActiveStep(0);&#10;      setUserType('');&#10;    }&#10;  };&#10;&#10;  const UserTypeSelection = () =&gt; (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, y: 50 }}&#10;      animate={{ opacity: 1, y: 0 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Box textAlign=&quot;center&quot; sx={{ mb: 6 }}&gt;&#10;        &lt;Typography&#10;          variant=&quot;h3&quot;&#10;          sx={{&#10;            mb: 2,&#10;            fontWeight: 700,&#10;            background: 'linear-gradient(45deg, #2563eb, #7c3aed)',&#10;            backgroundClip: 'text',&#10;            WebkitBackgroundClip: 'text',&#10;            WebkitTextFillColor: 'transparent',&#10;          }}&#10;        &gt;&#10;          Welcome to Cancer Care Support&#10;        &lt;/Typography&gt;&#10;        &lt;Typography&#10;          variant=&quot;h6&quot;&#10;          color=&quot;text.secondary&quot;&#10;          sx={{ maxWidth: 600, mx: 'auto' }}&#10;        &gt;&#10;          Please select your role to begin the onboarding process&#10;        &lt;/Typography&gt;&#10;      &lt;/Box&gt;&#10;&#10;      &lt;Grid container spacing={4} justifyContent=&quot;center&quot;&gt;&#10;        &lt;Grid item xs={12} sm={6} md={5}&gt;&#10;          &lt;motion.div&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            whileTap={{ scale: 0.98 }}&#10;          &gt;&#10;            &lt;Card&#10;              onClick={() =&gt; handleUserTypeSelection('caregiver')}&#10;              sx={{&#10;                cursor: 'pointer',&#10;                height: 280,&#10;                display: 'flex',&#10;                flexDirection: 'column',&#10;                justifyContent: 'center',&#10;                alignItems: 'center',&#10;                textAlign: 'center',&#10;                background: 'linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%)',&#10;                color: 'white',&#10;                transition: 'all 0.3s ease',&#10;                '&amp;:hover': {&#10;                  boxShadow: '0 20px 40px rgba(37, 99, 235, 0.3)',&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;CardContent&gt;&#10;                &lt;FaUserMd style={{ fontSize: '4rem', marginBottom: '1rem' }} /&gt;&#10;                &lt;Typography variant=&quot;h4&quot; sx={{ mb: 2, fontWeight: 600 }}&gt;&#10;                  Caregiver&#10;                &lt;/Typography&gt;&#10;                &lt;Typography variant=&quot;body1&quot; sx={{ opacity: 0.9 }}&gt;&#10;                  I'm here to provide support and care to a cancer patient&#10;                &lt;/Typography&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/motion.div&gt;&#10;        &lt;/Grid&gt;&#10;&#10;        &lt;Grid item xs={12} sm={6} md={5}&gt;&#10;          &lt;motion.div&#10;            whileHover={{ scale: 1.02, y: -5 }}&#10;            whileTap={{ scale: 0.98 }}&#10;          &gt;&#10;            &lt;Card&#10;              onClick={() =&gt; handleUserTypeSelection('patient')}&#10;              sx={{&#10;                cursor: 'pointer',&#10;                height: 280,&#10;                display: 'flex',&#10;                flexDirection: 'column',&#10;                justifyContent: 'center',&#10;                alignItems: 'center',&#10;                textAlign: 'center',&#10;                background: 'linear-gradient(135deg, #7c3aed 0%, #5b21b6 100%)',&#10;                color: 'white',&#10;                transition: 'all 0.3s ease',&#10;                '&amp;:hover': {&#10;                  boxShadow: '0 20px 40px rgba(124, 58, 237, 0.3)',&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;CardContent&gt;&#10;                &lt;FaUser style={{ fontSize: '4rem', marginBottom: '1rem' }} /&gt;&#10;                &lt;Typography variant=&quot;h4&quot; sx={{ mb: 2, fontWeight: 600 }}&gt;&#10;                  Patient&#10;                &lt;/Typography&gt;&#10;                &lt;Typography variant=&quot;body1&quot; sx={{ opacity: 0.9 }}&gt;&#10;                  I'm a cancer patient seeking support and care&#10;                &lt;/Typography&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/motion.div&gt;&#10;        &lt;/Grid&gt;&#10;      &lt;/Grid&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;&#10;  const QuestionnaireForm = () =&gt; {&#10;    if (userType === 'caregiver') {&#10;      return &lt;CaregiverForm formData={formData} setFormData={setFormData} onNext={() =&gt; setActiveStep(2)} /&gt;;&#10;    } else {&#10;      return &lt;PatientForm formData={formData} setFormData={setFormData} onNext={() =&gt; setActiveStep(2)} /&gt;;&#10;    }&#10;  };&#10;&#10;  const ConsentForm = ({ userType, onAccept, formData }) =&gt; {&#10;  const [accepted, setAccepted] = useState(false);&#10;  const [declined, setDeclined] = useState(false);&#10;  const router = useRouter();&#10;&#10;  const studyDetails = {&#10;    title: &quot;The Impact of a Nurse-led Family Caregiver Program Among Cancer Patients at a Tertiary Care Hospital in Bangalore.&quot;,&#10;    investigator: {&#10;      name: &quot;MR. James Raj K&quot;,&#10;      role: &quot;PHD Scholar&quot;,&#10;      institution: &quot;KLE Institute of Nursing Science, Belgaum&quot;,&#10;      contact: &quot;9500482944&quot;&#10;    },&#10;    purpose: &quot;The purpose of this study is to evaluate the impact of a nurse-led family caregiver program on alleviating caregiver burden, improving quality of life, and reducing stress among cancer patients and their caregivers.&quot;,&#10;    procedures: [&#10;      &quot;Pre-test Assessment: to assess baseline caregiver burden, quality of life, and stress levels using standardized tools.&quot;,&#10;      &quot;Intervention: Participation in a nurse-led family caregiver program designed to address areas identified in the pre-test.&quot;,&#10;      &quot;Immediate Post-test Assessment: immediately following the intervention to reassess caregiver burden, quality of life, and stress levels.&quot;,&#10;      &quot;Follow-up Post-test Assessment: 12 weeks after the intervention to assess the long-term impact on caregiver burden, quality of life, and stress levels.&quot;&#10;    ],&#10;    duration: &quot;Participation will last approximately 12 weeks, including the pre-test, intervention, and the two post-test assessments.&quot;,&#10;    risks: [&#10;      &quot;There may be some emotional discomfort when discussing personal experiences and stressors.&quot;,&#10;      &quot;Participation in the program requires a time commitment that might be challenging for some caregivers.&quot;&#10;    ],&#10;    benefits: [&#10;      &quot;Potential improvement in caregiver burden, quality of life, and stress levels.&quot;,&#10;      &quot;Contribution to research that may help other caregivers in the future.&quot;&#10;    ]&#10;  };&#10;&#10;  const handleConsent = () =&gt; {&#10;    if (accepted) {&#10;      onAccept(); // This will trigger setActiveStep(2) to show demographic questions&#10;    }&#10;  };&#10;&#10;  const handleDecline = () =&gt; {&#10;    setDeclined(true);&#10;  };&#10;&#10;  if (declined) {&#10;    return (&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 50 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ duration: 0.6 }}&#10;      &gt;&#10;        &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4, textAlign: 'center' }}&gt;&#10;          &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3 }}&gt;&#10;            Thank you for your response&#10;          &lt;/Typography&gt;&#10;          &lt;Typography variant=&quot;body1&quot; sx={{ mb: 4 }}&gt;&#10;            Take your time and come back when you're ready.&#10;          &lt;/Typography&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            onClick={() =&gt; router.push('/')}&#10;          &gt;&#10;            Return to Home&#10;          &lt;/Button&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/motion.div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, y: 50 }}&#10;      animate={{ opacity: 1, y: 0 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 800, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h4&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Consent Form&#10;        &lt;/Typography&gt;&#10;        &#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 2 }}&gt;&#10;          Title of Study:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.title}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Principal Investigator:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.investigator.name}&lt;br /&gt;&#10;          {studyDetails.investigator.role}&lt;br /&gt;&#10;          {studyDetails.investigator.institution}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Purpose of the Study:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.purpose}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Study Procedures:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.procedures.map((proc, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {proc}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Duration:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          {studyDetails.duration}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Risks and Discomforts:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.risks.map((risk, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {risk}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Benefits:&#10;        &lt;/Typography&gt;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          {studyDetails.benefits.map((benefit, index) =&gt; (&#10;            &lt;Typography key={index} variant=&quot;body1&quot; sx={{ mb: 1 }}&gt;&#10;              • {benefit}&#10;            &lt;/Typography&gt;&#10;          ))}&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;          Contact Information:&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;body1&quot; sx={{ mb: 3 }}&gt;&#10;          For questions or concerns, contact:&lt;br /&gt;&#10;          {studyDetails.investigator.name}&lt;br /&gt;&#10;          {studyDetails.investigator.role}&lt;br /&gt;&#10;          {studyDetails.investigator.institution}&lt;br /&gt;&#10;          Mob: {studyDetails.investigator.contact}&#10;        &lt;/Typography&gt;&#10;&#10;        &lt;Box sx={{ mb: 3 }}&gt;&#10;          &lt;FormControlLabel&#10;            control={&#10;              &lt;Checkbox &#10;                checked={accepted}&#10;                onChange={(e) =&gt; setAccepted(e.target.checked)}&#10;              /&gt;&#10;            }&#10;            label=&quot;I have read and understood the information above. I voluntarily agree to participate in this study and understand I can withdraw at any time without penalty.&quot;&#10;          /&gt;&#10;        &lt;/Box&gt;&#10;&#10;        &lt;Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            color=&quot;error&quot;&#10;            onClick={handleDecline}&#10;          &gt;&#10;            Decline&#10;          &lt;/Button&gt;&#10;          &lt;Button&#10;            variant=&quot;contained&quot;&#10;            disabled={!accepted}&#10;            onClick={handleConsent}&#10;          &gt;&#10;            Accept and Continue to Login&#10;          &lt;/Button&gt;&#10;        &lt;/Box&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;const CompletionStep = ({ formData }) =&gt; {&#10;  const router = useRouter();&#10;  const [countdown, setCountdown] = useState(5);&#10;&#10;  useEffect(() =&gt; {&#10;    // Only start countdown if we have the required data&#10;    if (formData?.generatedId &amp;&amp; formData?.userType) {&#10;      const timer = setInterval(() =&gt; {&#10;        setCountdown((prev) =&gt; {&#10;          if (prev &lt;= 1) {&#10;            // Redirect to login with pre-filled data&#10;            router.push(`/login?userId=${formData.generatedId}&amp;userType=${formData.userType}&amp;auto=true`);&#10;            return 0;&#10;          }&#10;          return prev - 1;&#10;        });&#10;      }, 1000);&#10;&#10;      return () =&gt; clearInterval(timer);&#10;    }&#10;  }, [formData?.generatedId, formData?.userType, router]);&#10;&#10;  const handleLoginNow = () =&gt; {&#10;    if (formData?.generatedId &amp;&amp; formData?.userType) {&#10;      router.push(`/login?userId=${formData.generatedId}&amp;userType=${formData.userType}&amp;auto=true`);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      initial={{ opacity: 0, scale: 0.8 }}&#10;      animate={{ opacity: 1, scale: 1 }}&#10;      transition={{ duration: 0.6 }}&#10;    &gt;&#10;      &lt;Box textAlign=&quot;center&quot;&gt;&#10;        &lt;FaHeart style={{ fontSize: '4rem', color: '#ef4444', marginBottom: '2rem' }} /&gt;&#10;        &lt;Typography variant=&quot;h3&quot; sx={{ mb: 2, fontWeight: 700 }}&gt;&#10;          Registration Complete!&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;h6&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;          Your account has been created successfully. You will be automatically redirected to login.&#10;        &lt;/Typography&gt;&#10;        {formData?.generatedId ? (&#10;          &lt;&gt;&#10;            &lt;Typography variant=&quot;body1&quot; sx={{ mb: 2, p: 3, backgroundColor: 'action.hover', borderRadius: 2 }}&gt;&#10;              &lt;strong&gt;Your ID:&lt;/strong&gt; {formData.generatedId}&#10;            &lt;/Typography&gt;&#10;            &lt;Typography variant=&quot;body2&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;              Please save this ID for future logins&#10;            &lt;/Typography&gt;&#10;            &#10;            &lt;Box sx={{ mb: 4 }}&gt;&#10;              &lt;Typography variant=&quot;h6&quot; sx={{ mb: 2 }}&gt;&#10;                Redirecting to login in {countdown} seconds...&#10;              &lt;/Typography&gt;&#10;              &lt;Button&#10;                variant=&quot;contained&quot;&#10;                size=&quot;large&quot;&#10;                onClick={handleLoginNow}&#10;                sx={{ px: 4, py: 2, mr: 2 }}&#10;              &gt;&#10;                Login Now&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                variant=&quot;outlined&quot;&#10;                size=&quot;large&quot;&#10;                onClick={() =&gt; router.push('/')}&#10;                sx={{ px: 4, py: 2 }}&#10;              &gt;&#10;                Back to Home&#10;              &lt;/Button&gt;&#10;            &lt;/Box&gt;&#10;          &lt;/&gt;&#10;        ) : (&#10;          &lt;Box sx={{ mb: 4 }}&gt;&#10;            &lt;Typography variant=&quot;body1&quot; color=&quot;text.secondary&quot; sx={{ mb: 4 }}&gt;&#10;              Registration completed successfully!&#10;            &lt;/Typography&gt;&#10;            &lt;Button&#10;              variant=&quot;contained&quot;&#10;              size=&quot;large&quot;&#10;              onClick={() =&gt; router.push('/login')}&#10;              sx={{ px: 4, py: 2, mr: 2 }}&#10;            &gt;&#10;              Go to Login&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              variant=&quot;outlined&quot;&#10;              size=&quot;large&quot;&#10;              onClick={() =&gt; router.push('/')}&#10;              sx={{ px: 4, py: 2 }}&#10;            &gt;&#10;              Back to Home&#10;            &lt;/Button&gt;&#10;          &lt;/Box&gt;&#10;        )}&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;  return (&#10;    &lt;Box sx={{&#10;      minHeight: '100vh',&#10;      backgroundColor: 'background.default',&#10;      py: 4&#10;    }}&gt;&#10;      {/* Header */}&#10;      &lt;Box sx={{&#10;        position: 'absolute',&#10;        top: 20,&#10;        right: 20,&#10;        zIndex: 1000&#10;      }}&gt;&#10;        &lt;IconButton onClick={toggleTheme}&gt;&#10;          {isDarkMode ? &lt;FaSun /&gt; : &lt;FaMoon /&gt;}&#10;        &lt;/IconButton&gt;&#10;      &lt;/Box&gt;&#10;&#10;      &lt;Container maxWidth=&quot;lg&quot;&gt;&#10;        {/* Stepper */}&#10;        &lt;Box sx={{ mb: 6 }}&gt;&#10;          &lt;Stepper activeStep={activeStep} alternativeLabel&gt;&#10;            {steps.map((label) =&gt; (&#10;              &lt;Step key={label}&gt;&#10;                &lt;StepLabel&gt;{label}&lt;/StepLabel&gt;&#10;              &lt;/Step&gt;&#10;            ))}&#10;          &lt;/Stepper&gt;&#10;        &lt;/Box&gt;&#10;&#10;        {/* Content */}&#10;        &lt;AnimatePresence mode=&quot;wait&quot;&gt;&#10;          {activeStep === 0 &amp;&amp; &lt;UserTypeSelection /&gt;}&#10;          {activeStep === 1 &amp;&amp; (&#10;            &lt;ConsentForm &#10;              userType={userType} &#10;              formData={formData}&#10;              onAccept={() =&gt; {&#10;                setConsentAccepted(true);&#10;                setActiveStep(2);&#10;              }} &#10;            /&gt;&#10;          )}&#10;          {activeStep === 2 &amp;&amp; (&#10;            userType === 'caregiver' ? &#10;              &lt;CaregiverForm &#10;                formData={formData} &#10;                setFormData={setFormData} &#10;                onNext={() =&gt; setActiveStep(3)} &#10;                onBack={() =&gt; setActiveStep(1)}&#10;                consentAccepted={consentAccepted}&#10;              /&gt; :&#10;              &lt;PatientForm &#10;                formData={formData} &#10;                setFormData={setFormData} &#10;                onNext={() =&gt; setActiveStep(3)} &#10;                onBack={() =&gt; setActiveStep(1)}&#10;                consentAccepted={consentAccepted}&#10;              /&gt;&#10;          )}&#10;          {activeStep === 3 &amp;&amp; &lt;CompletionStep formData={formData} /&gt;}&#10;        &lt;/AnimatePresence&gt;&#10;&#10;&#10;      &lt;/Container&gt;&#10;    &lt;/Box&gt;&#10;  );&#10;}&#10;&#10;// Caregiver Form Component&#10;function CaregiverForm({ formData, setFormData, onNext, onBack, consentAccepted }) {&#10;  const [currentQuestion, setCurrentQuestion] = useState(0);&#10;  const [answers, setAnswers] = useState({});&#10;&#10;  const handleSubmitAnswer = (value) =&gt; {&#10;    const currentQ = questions[currentQuestion];&#10;    let finalValue = value;&#10;&#10;    // Handle 'Other' option for fields that allow it&#10;    if (currentQ.allowOther &amp;&amp; value === 'Other') {&#10;      finalValue = answers[`${currentQ.id}Other`] || 'Other';&#10;    }&#10;&#10;    // Merge current answer into state&#10;    const mergedAnswers = { ...answers, [currentQ.id]: finalValue };&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setAnswers(mergedAnswers);&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `CG${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...mergedAnswers, userType: 'caregiver', generatedId });&#10;&#10;      // Submit to API with full caregiver payload&#10;      submitRegistration({&#10;        ...mergedAnswers,&#10;        userType: 'caregiver',&#10;        caregiverId: generatedId,&#10;        consentAccepted: !!consentAccepted,&#10;        questionnaireAnswers: mergedAnswers&#10;      });&#10;&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const questions = [&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'name',&#10;      question: 'What is your full name?',&#10;      type: 'text',&#10;      placeholder: 'Enter your full name',&#10;      pattern: '^[a-zA-Z ]+$',&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'phone',&#10;      question: 'What is your phone number?',&#10;      type: 'tel',&#10;      placeholder: 'Enter your phone number',&#10;      pattern: '^[0-9]{10}$',&#10;      required: true&#10;    },&#10;&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'age',&#10;      question: 'Age (in years):',&#10;      type: 'radio',&#10;      options: ['18-30', '31-40', '41-50', '51-60', '61 and above'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;  &#10;    {&#10;      section: 'Personal Details',&#10;      id: 'gender',&#10;      question: 'Gender:',&#10;      type: 'radio',&#10;      options: ['Male', 'Female', 'Non-binary', 'Prefer not to say', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'maritalStatus',&#10;      question: 'Marital Status:',&#10;      type: 'radio',&#10;      options: ['Single', 'Married', 'Widowed', 'Divorced', 'Separated'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'educationLevel',&#10;      question: 'Educational Level:',&#10;      type: 'radio',&#10;      options: ['No formal education', 'Primary education', 'Secondary education', 'Higher secondary', 'Undergraduate degree', 'Postgraduate degree'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'employmentStatus',&#10;      question: 'Employment Status:',&#10;      type: 'radio',&#10;      options: ['Full-time employed', 'Part-time employed', 'Self-employed', 'Unemployed', 'Retired', 'Student', 'Homemaker'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Personal Details',&#10;      id: 'residentialArea',&#10;      question: 'Residential Area:',&#10;      type: 'radio',&#10;      options: ['Urban', 'Rural', 'Suburban'],&#10;      required: true&#10;    },&#10;  &#10;&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'relationshipToPatient',&#10;      question: 'Relationship to the Patient:',&#10;      type: 'radio',&#10;      options: ['Spouse', 'Parent', 'Child', 'Sibling', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'hoursPerDay',&#10;      question: 'Hours Spent Caring per Day:',&#10;      type: 'radio',&#10;      options: ['Less than 2 hours', '2-4 hours', '5-8 hours', 'More than 8 hours'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'durationOfCaregiving',&#10;      question: 'Duration of Caregiving:',&#10;      type: 'radio',&#10;      options: ['Less than 6 months', '6-12 months', '1-2 years', '2-5 years', 'More than 5 years'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'previousExperience',&#10;      question: 'Previous Experience as a Caregiver:',&#10;      type: 'radio',&#10;      options: ['Yes', 'No'],&#10;      required: true&#10;    },&#10;   &#10;    {&#10;      section: 'Caregiving Information',&#10;      id: 'supportSystem',&#10;      question: 'Support System Available (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['Family Support', 'Friends', 'Community Support Groups', 'Religious/Spiritual Support', 'Professional Support Services', 'None'],&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Health and Well-being',&#10;      id: 'physicalHealth',&#10;      question: 'Physical Health Conditions (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['None', 'Diabetes', 'Hypertension', 'Heart Disease', 'Arthritis', 'Back Pain', 'Respiratory Issues', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      section: 'Health and Well-being',&#10;      id: 'mentalHealth',&#10;      question: 'Mental Health Conditions (select all that apply):',&#10;      type: 'multiSelect',&#10;      options: ['None', 'Depression', 'Anxiety', 'Stress-related disorder', 'Sleep Issues', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;  &#10;  ];&#10;&#10;  const handleAnswer = (value) =&gt; {&#10;    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };&#10;    setAnswers(newAnswers);&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `CG${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...newAnswers, userType: 'caregiver', generatedId });&#10;&#10;      // Submit to API&#10;      submitRegistration({ &#10;        ...newAnswers, &#10;        userType: 'caregiver', &#10;        caregiverId: generatedId,&#10;        consentAccepted: consentAccepted,&#10;        questionnaireAnswers: newAnswers&#10;      });&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    if (currentQuestion &gt; 0) {&#10;      setCurrentQuestion(currentQuestion - 1);&#10;    } else {&#10;      // If on first question, go back to consent form&#10;      onBack();&#10;    }&#10;  };&#10;&#10;  const submitRegistration = async (data) =&gt; {&#10;    try {&#10;      console.log('Submitting caregiver registration data:', data);&#10;      const response = await fetch('/api/register', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(data)&#10;      });&#10;      &#10;      const result = await response.json();&#10;      console.log('Caregiver registration response:', result);&#10;      &#10;      if (!response.ok) {&#10;        throw new Error(result.message || 'Registration failed');&#10;      }&#10;      &#10;      console.log('Caregiver registration successful:', result);&#10;    } catch (error) {&#10;      console.error('Caregiver registration error:', error);&#10;      alert('Registration failed: ' + error.message);&#10;    }&#10;  };&#10;&#10;  const renderField = () =&gt; {&#10;    const question = questions[currentQuestion];&#10;    const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;    switch (question.type) {&#10;      case 'multiSelect':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; {&#10;              const isSelected = currentValue.includes(option);&#10;              const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;              &#10;              return (&#10;                &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                    onClick={() =&gt; {&#10;                      let newValue;&#10;                      if (option === 'None') {&#10;                        newValue = isSelected ? [] : ['None'];&#10;                      } else {&#10;                        if (isNoneSelected) {&#10;                          newValue = [option];&#10;                        } else {&#10;                          newValue = isSelected&#10;                            ? currentValue.filter(val =&gt; val !== option)&#10;                            : [...currentValue, option];&#10;                        }&#10;                      }&#10;                      setAnswers({ ...answers, [question.id]: newValue });&#10;                    }}&#10;                    disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                    sx={{&#10;                      p: 2,&#10;                      textAlign: 'left',&#10;                      backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                      color: isSelected ? 'white' : 'inherit',&#10;                      '&amp;:hover': isSelected &#10;                        ? { backgroundColor: 'primary.dark' }&#10;                        : { backgroundColor: 'primary.main', color: 'white' }&#10;                    }}&#10;                  &gt;&#10;                    {option}&#10;                  &lt;/Button&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;            })}&#10;            {question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify other condition&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  onKeyPress={(e) =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                      e.preventDefault();&#10;                      // Replace &quot;Other&quot; with the custom text in the current value&#10;                      let finalValue = currentValue.map(val =&gt; &#10;                        val === 'Other' ? e.target.value.trim() : val&#10;                      );&#10;                      handleAnswer(finalValue);&#10;                    }&#10;                  }}&#10;                  sx={{ mt: 2 }}&#10;                  label=&quot;Please specify&quot;&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;            &lt;Grid item xs={12}&gt;&#10;              &lt;Button&#10;                fullWidth&#10;                variant=&quot;contained&quot;&#10;                onClick={() =&gt; {&#10;                  let finalValue = currentValue;&#10;                  // If &quot;Other&quot; is selected and there's text in the other field, replace &quot;Other&quot; with the custom text&#10;                  if (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; answers[`${question.id}Other`]) {&#10;                    finalValue = currentValue.map(val =&gt; &#10;                      val === 'Other' ? answers[`${question.id}Other`] : val&#10;                    );&#10;                  }&#10;                  handleAnswer(finalValue);&#10;                }}&#10;                disabled={!currentValue.length || (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; !answers[`${question.id}Other`])}&#10;                sx={{ mt: 2 }}&#10;              &gt;&#10;                {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;              &lt;/Button&gt;&#10;            &lt;/Grid&gt;&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'radio':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; (&#10;              &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                &lt;Button&#10;                  fullWidth&#10;                  variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                  onClick={() =&gt; handleAnswer(option)}&#10;                  sx={{&#10;                    p: 2,&#10;                    textAlign: 'left',&#10;                    backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                    color: currentValue === option ? 'white' : 'inherit',&#10;                    '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                  }}&#10;                &gt;&#10;                  {option}&#10;                &lt;/Button&gt;&#10;              &lt;/Grid&gt;&#10;            ))}&#10;            {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  onKeyPress={(e) =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                      e.preventDefault();&#10;                      handleAnswer(e.target.value.trim());&#10;                    }&#10;                  }}&#10;                  sx={{ mt: 2 }}&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'textarea':&#10;        return (&#10;          &lt;TextField&#10;            fullWidth&#10;            multiline&#10;            rows={4}&#10;            placeholder={question.placeholder}&#10;            value={currentValue}&#10;            onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            onKeyPress={(e) =&gt; {&#10;              if (e.key === 'Enter' &amp;&amp; !e.shiftKey &amp;&amp; e.target.value.trim()) {&#10;                e.preventDefault();&#10;                handleAnswer(e.target.value.trim());&#10;              }&#10;            }}&#10;          /&gt;&#10;        );&#10;&#10;      default:&#10;        return (&#10;          &lt;TextField&#10;            fullWidth&#10;            type={question.type}&#10;            placeholder={question.placeholder}&#10;            value={currentValue}&#10;            inputProps={{&#10;              min: question.min,&#10;              max: question.max,&#10;              pattern: question.pattern&#10;            }}&#10;            onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            onKeyPress={(e) =&gt; {&#10;              if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                e.preventDefault();&#10;                handleAnswer(e.target.value.trim());&#10;              }&#10;            }}&#10;          /&gt;&#10;        );&#10;    }&#10;  };&#10;&#10;  const renderQuestionField = () =&gt; {&#10;    const question = questions[currentQuestion];&#10;    const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;    switch (question.type) {&#10;      case 'multiSelect':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; {&#10;              const isSelected = currentValue.includes(option);&#10;              const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;              &#10;              return (&#10;                &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                    onClick={() =&gt; {&#10;                      let newValue;&#10;                      if (option === 'None') {&#10;                        newValue = isSelected ? [] : ['None'];&#10;                      } else {&#10;                        if (isNoneSelected) {&#10;                          newValue = [option];&#10;                        } else {&#10;                          newValue = isSelected&#10;                            ? currentValue.filter(val =&gt; val !== option)&#10;                            : [...currentValue, option];&#10;                        }&#10;                      }&#10;                      setAnswers({ ...answers, [question.id]: newValue });&#10;                    }}&#10;                    disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                    sx={{&#10;                      p: 2,&#10;                      textAlign: 'left',&#10;                      backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                      color: isSelected ? 'white' : 'inherit',&#10;                      '&amp;:hover': isSelected &#10;                        ? { backgroundColor: 'primary.dark' }&#10;                        : { backgroundColor: 'primary.main', color: 'white' }&#10;                    }}&#10;                  &gt;&#10;                    {option}&#10;                  &lt;/Button&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;            })}&#10;            &lt;Grid item xs={12}&gt;&#10;              &lt;Button&#10;                fullWidth&#10;                variant=&quot;contained&quot;&#10;                onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;                disabled={!currentValue.length}&#10;                sx={{ mt: 2 }}&#10;              &gt;&#10;                {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;              &lt;/Button&gt;&#10;            &lt;/Grid&gt;&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'radio':&#10;        return (&#10;          &lt;Grid container spacing={2}&gt;&#10;            {question.options.map((option) =&gt; (&#10;              &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                &lt;Button&#10;                  fullWidth&#10;                  variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                  onClick={() =&gt; handleSubmitAnswer(option)}&#10;                  sx={{&#10;                    p: 2,&#10;                    textAlign: 'left',&#10;                    backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                    color: currentValue === option ? 'white' : 'inherit',&#10;                    '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                  }}&#10;                &gt;&#10;                  {option}&#10;                &lt;/Button&gt;&#10;              &lt;/Grid&gt;&#10;            ))}&#10;            {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;              &lt;Grid item xs={12}&gt;&#10;                &lt;TextField&#10;                  fullWidth&#10;                  placeholder=&quot;Please specify&quot;&#10;                  value={answers[`${question.id}Other`] || ''}&#10;                  onChange={(e) =&gt; setAnswers({&#10;                    ...answers,&#10;                    [`${question.id}Other`]: e.target.value&#10;                  })}&#10;                  sx={{ mt: 2 }}&#10;                /&gt;&#10;              &lt;/Grid&gt;&#10;            )}&#10;          &lt;/Grid&gt;&#10;        );&#10;&#10;      case 'textarea':&#10;        return (&#10;          &lt;&gt;&#10;            &lt;TextField&#10;              fullWidth&#10;              multiline&#10;              rows={4}&#10;              placeholder={question.placeholder}&#10;              value={currentValue}&#10;              onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            /&gt;&#10;            &lt;Button&#10;              fullWidth&#10;              variant=&quot;contained&quot;&#10;              onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;              disabled={!currentValue.trim()}&#10;              sx={{ mt: 2 }}&#10;            &gt;&#10;              {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;            &lt;/Button&gt;&#10;          &lt;/&gt;&#10;        );&#10;&#10;      default:&#10;        return (&#10;          &lt;&gt;&#10;            &lt;TextField&#10;              fullWidth&#10;              type={question.type}&#10;              placeholder={question.placeholder}&#10;              value={currentValue}&#10;              inputProps={{&#10;                min: question.min,&#10;                max: question.max,&#10;                pattern: question.pattern&#10;              }}&#10;              onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;            /&gt;&#10;            &lt;Button&#10;              fullWidth&#10;              variant=&quot;contained&quot;&#10;              onClick={() =&gt; handleSubmitAnswer(currentValue)}&#10;              disabled={!currentValue.trim()}&#10;              sx={{ mt: 2 }}&#10;            &gt;&#10;              {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;            &lt;/Button&gt;&#10;          &lt;/&gt;&#10;        );&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      key={currentQuestion}&#10;      initial={{ opacity: 0, x: 50 }}&#10;      animate={{ opacity: 1, x: 0 }}&#10;      exit={{ opacity: 0, x: -50 }}&#10;      transition={{ duration: 0.4 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Question {currentQuestion + 1} of {questions.length}&#10;        &lt;/Typography&gt;&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 4 }}&gt;&#10;          {questions[currentQuestion].question}&#10;        &lt;/Typography&gt;&#10;        {renderQuestionField()}&#10;      &lt;/Card&gt;&#10;      &#10;      {/* Back Button - Outside the card */}&#10;      &lt;Box sx={{ display: 'flex', justifyContent: 'flex-start', mt: 3, maxWidth: 600, mx: 'auto' }}&gt;&#10;        &lt;Button&#10;          startIcon={&lt;FaArrowLeft /&gt;}&#10;          onClick={handlePrevious}&#10;          variant=&quot;outlined&quot;&#10;          sx={{ mr: 2 }}&#10;        &gt;&#10;          {currentQuestion === 0 ? 'Back to Consent Form' : 'Previous Question'}&#10;        &lt;/Button&gt;&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;// Patient Form Component&#10;const PatientForm = ({ formData, setFormData, onNext, onBack, consentAccepted }) =&gt; {&#10;  const [currentQuestion, setCurrentQuestion] = useState(0);&#10;  const [answers, setAnswers] = useState({});&#10;&#10;  const questions = [&#10;    // Basic Information&#10;    {&#10;      id: 'name',&#10;      question: 'What is your full name?',&#10;      type: 'text',&#10;      section: 'Basic Information',&#10;      required: true&#10;    },&#10;    {&#10;      id: 'phone',&#10;      question: 'What is your phone number?',&#10;      type: 'tel',&#10;      section: 'Basic Information',&#10;      required: true&#10;    },&#10;&#10;    // Section I: Demographic Questions&#10;    {&#10;      id: 'age',&#10;      question: '1. Age (in years):',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['18-30', '31-40', '41-50', '51-60', '61 and above'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'gender',&#10;      question: '2. Gender:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Male', 'Female', 'Other'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'maritalStatus',&#10;      question: '3. Marital Status:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Single', 'Married', 'Widowed', 'Divorced', 'Separated'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'educationLevel',&#10;      question: '4. Educational Level:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['No formal education', 'Primary education', 'Secondary education', 'Higher secondary', 'Undergraduate degree', 'Postgraduate degree'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'employmentStatus',&#10;      question: '5. Employment Status:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Employed (Full-time/Part-time)', 'Unemployed', 'Retired', 'Homemaker', 'Student'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'residentialArea',&#10;      question: '6. Residential Area:',&#10;      type: 'radio',&#10;      section: 'Demographic Information',&#10;      options: ['Urban', 'Rural'],&#10;      required: true&#10;    },&#10;&#10;    // Section II: Medical Information&#10;    {&#10;      id: 'cancerType',&#10;      question: '7. Type of Cancer:',&#10;      type: 'text',&#10;      section: 'Medical Information',&#10;      placeholder: 'Please specify your cancer type',&#10;      required: true&#10;    },&#10;    {&#10;      id: 'cancerStage',&#10;      question: '8. Stage of Cancer:',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Stage I', 'Stage II', 'Stage III', 'Stage IV'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'treatmentModality',&#10;      question: '9. Current Treatment Modality (check all that apply):',&#10;      type: 'multiSelect',&#10;      section: 'Medical Information',&#10;      options: ['Chemotherapy', 'Radiation Therapy', 'Surgery', 'Immunotherapy', 'Hormone Therapy', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      id: 'illnessDuration',&#10;      question: '10. Duration of Illness (since diagnosis):',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Less than 6 months', '6-12 months', '1-2 years', 'More than 2 years'],&#10;      required: true&#10;    },&#10;    {&#10;      id: 'comorbidities',&#10;      question: '11. Other Comorbidities (check all that apply):',&#10;      type: 'multiSelect',&#10;      section: 'Medical Information',&#10;      options: ['Diabetes', 'Hypertension', 'Cardiovascular disease', 'Respiratory Disorders', 'None', 'Other'],&#10;      allowOther: true,&#10;      required: true&#10;    },&#10;    {&#10;      id: 'healthInsurance',&#10;      question: '12. Health Insurance Coverage:',&#10;      type: 'radio',&#10;      section: 'Medical Information',&#10;      options: ['Yes - Government', 'Yes - Private', 'No'],&#10;      required: true&#10;    }&#10;  ];&#10;&#10;  const handleAnswer = (value) =&gt; {&#10;    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };&#10;    setAnswers(newAnswers);&#10;&#10;    if (currentQuestion &lt; questions.length - 1) {&#10;      setCurrentQuestion(currentQuestion + 1);&#10;    } else {&#10;      // Generate ID and complete registration&#10;      const generatedId = `PT${Date.now().toString(36).toUpperCase()}`;&#10;      setFormData({ ...newAnswers, userType: 'patient', generatedId });&#10;&#10;      // Submit to API&#10;      submitRegistration({ &#10;        ...newAnswers, &#10;        userType: 'patient', &#10;        patientId: generatedId,&#10;        consentAccepted: !!consentAccepted,&#10;        questionnaireAnswers: newAnswers&#10;      });&#10;      onNext();&#10;    }&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    if (currentQuestion &gt; 0) {&#10;      setCurrentQuestion(currentQuestion - 1);&#10;    } else {&#10;      // If on first question, go back to consent form&#10;      onBack();&#10;    }&#10;  };&#10;&#10;  const submitRegistration = async (data) =&gt; {&#10;    try {&#10;      console.log('Submitting patient registration data:', data);&#10;      const response = await fetch('/api/register', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(data)&#10;      });&#10;      &#10;      const result = await response.json();&#10;      console.log('Patient registration response:', result);&#10;      &#10;      if (!response.ok) {&#10;        throw new Error(result.message || 'Registration failed');&#10;      }&#10;      &#10;      console.log('Patient registration successful:', result);&#10;    } catch (error) {&#10;      console.error('Patient registration error:', error);&#10;      alert('Registration failed: ' + error.message);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;motion.div&#10;      key={currentQuestion}&#10;      initial={{ opacity: 0, x: 50 }}&#10;      animate={{ opacity: 1, x: 0 }}&#10;      exit={{ opacity: 0, x: -50 }}&#10;      transition={{ duration: 0.4 }}&#10;    &gt;&#10;      &lt;Card sx={{ maxWidth: 600, mx: 'auto', p: 4 }}&gt;&#10;        &lt;Typography variant=&quot;h5&quot; sx={{ mb: 3, textAlign: 'center' }}&gt;&#10;          Question {currentQuestion + 1} of {questions.length}&#10;        &lt;/Typography&gt;&#10;        {questions[currentQuestion].section &amp;&amp; (&#10;          &lt;Typography variant=&quot;subtitle1&quot; sx={{ mb: 2, color: 'primary.main', textAlign: 'center', fontWeight: 600 }}&gt;&#10;            {questions[currentQuestion].section}&#10;          &lt;/Typography&gt;&#10;        )}&#10;        &lt;Typography variant=&quot;h6&quot; sx={{ mb: 4 }}&gt;&#10;          {questions[currentQuestion].question}&#10;        &lt;/Typography&gt;&#10;&#10;        {(() =&gt; {&#10;          const question = questions[currentQuestion];&#10;          const currentValue = answers[question.id] || (question.type === 'multiSelect' ? [] : '');&#10;&#10;          switch (question.type) {&#10;            case 'multiSelect':&#10;              return (&#10;                &lt;Grid container spacing={2}&gt;&#10;                  {question.options.map((option) =&gt; {&#10;                    const isSelected = currentValue.includes(option);&#10;                    const isNoneSelected = option === 'None' ? isSelected : currentValue.includes('None');&#10;                    &#10;                    return (&#10;                      &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                        &lt;Button&#10;                          fullWidth&#10;                          variant={isSelected ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                          onClick={() =&gt; {&#10;                            let newValue;&#10;                            if (option === 'None') {&#10;                              newValue = isSelected ? [] : ['None'];&#10;                            } else {&#10;                              if (isNoneSelected) {&#10;                                newValue = [option];&#10;                              } else {&#10;                                newValue = isSelected&#10;                                  ? currentValue.filter(val =&gt; val !== option)&#10;                                  : [...currentValue, option];&#10;                              }&#10;                            }&#10;                            setAnswers({ ...answers, [question.id]: newValue });&#10;                          }}&#10;                          disabled={option !== 'None' &amp;&amp; isNoneSelected}&#10;                          sx={{&#10;                            p: 2,&#10;                            textAlign: 'left',&#10;                            backgroundColor: isSelected ? 'primary.main' : 'transparent',&#10;                            color: isSelected ? 'white' : 'inherit',&#10;                            '&amp;:hover': isSelected &#10;                              ? { backgroundColor: 'primary.dark' }&#10;                              : { backgroundColor: 'primary.main', color: 'white' }&#10;                          }}&#10;                        &gt;&#10;                          {option}&#10;                        &lt;/Button&gt;&#10;                      &lt;/Grid&gt;&#10;                    );&#10;                  })}&#10;                  {question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; (&#10;                    &lt;Grid item xs={12}&gt;&#10;                      &lt;TextField&#10;                        fullWidth&#10;                        placeholder=&quot;Please specify other treatment/condition&quot;&#10;                        value={answers[`${question.id}Other`] || ''}&#10;                        onChange={(e) =&gt; setAnswers({&#10;                          ...answers,&#10;                          [`${question.id}Other`]: e.target.value&#10;                        })}&#10;                        onKeyPress={(e) =&gt; {&#10;                          if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                            e.preventDefault();&#10;                            // Replace &quot;Other&quot; with the custom text in the current value&#10;                            let finalValue = currentValue.map(val =&gt; &#10;                              val === 'Other' ? e.target.value.trim() : val&#10;                            );&#10;                            handleAnswer(finalValue);&#10;                          }&#10;                        }}&#10;                        sx={{ mt: 2 }}&#10;                        label=&quot;Please specify&quot;&#10;                      /&gt;&#10;                    &lt;/Grid&gt;&#10;                  )}&#10;                  &lt;Grid item xs={12}&gt;&#10;                    &lt;Button&#10;                      fullWidth&#10;                      variant=&quot;contained&quot;&#10;                      onClick={() =&gt; {&#10;                        let finalValue = currentValue;&#10;                        // If &quot;Other&quot; is selected and there's text in the other field, replace &quot;Other&quot; with the custom text&#10;                        if (question.allowOther &amp;&amp; currentValue.includes('Other') &amp;&amp; answers[`${question.id}Other`]) {&#10;                          finalValue = currentValue.map(val =&gt; &#10;                            val === 'Other' ? answers[`${question.id}Other`] : val&#10;                          );&#10;                        }&#10;                        handleAnswer(finalValue);&#10;                      }}&#10;                      disabled={!currentValue.length || (currentValue.includes('Other') &amp;&amp; question.allowOther &amp;&amp; !answers[`${question.id}Other`])}&#10;                      sx={{ mt: 2 }}&#10;                    &gt;&#10;                      {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                    &lt;/Button&gt;&#10;                  &lt;/Grid&gt;&#10;                &lt;/Grid&gt;&#10;              );&#10;&#10;            case 'radio':&#10;              return (&#10;                &lt;Grid container spacing={2}&gt;&#10;                  {question.options.map((option) =&gt; (&#10;                    &lt;Grid item xs={12} sm={6} key={option}&gt;&#10;                      &lt;Button&#10;                        fullWidth&#10;                        variant={currentValue === option ? &quot;contained&quot; : &quot;outlined&quot;}&#10;                        onClick={() =&gt; {&#10;                          if (option === 'Other' &amp;&amp; question.allowOther) {&#10;                            setAnswers({ ...answers, [question.id]: option });&#10;                          } else {&#10;                            handleAnswer(option);&#10;                          }&#10;                        }}&#10;                        sx={{&#10;                          p: 2,&#10;                          textAlign: 'left',&#10;                          backgroundColor: currentValue === option ? 'primary.main' : 'transparent',&#10;                          color: currentValue === option ? 'white' : 'inherit',&#10;                          '&amp;:hover': { backgroundColor: 'primary.main', color: 'white' }&#10;                        }}&#10;                      &gt;&#10;                        {option}&#10;                      &lt;/Button&gt;&#10;                    &lt;/Grid&gt;&#10;                  ))}&#10;                  {question.allowOther &amp;&amp; currentValue === 'Other' &amp;&amp; (&#10;                    &lt;Grid item xs={12}&gt;&#10;                      &lt;TextField&#10;                        fullWidth&#10;                        placeholder=&quot;Please specify&quot;&#10;                        value={answers[`${question.id}Other`] || ''}&#10;                        onChange={(e) =&gt; setAnswers({&#10;                          ...answers,&#10;                          [`${question.id}Other`]: e.target.value&#10;                        })}&#10;                        onKeyPress={(e) =&gt; {&#10;                          if (e.key === 'Enter' &amp;&amp; e.target.value.trim()) {&#10;                            e.preventDefault();&#10;                            handleAnswer(e.target.value.trim());&#10;                          }&#10;                        }}&#10;                        sx={{ mt: 2 }}&#10;                        label=&quot;Please specify&quot;&#10;                      /&gt;&#10;                      &lt;Button&#10;                        fullWidth&#10;                        variant=&quot;contained&quot;&#10;                        onClick={() =&gt; handleAnswer(answers[`${question.id}Other`] || 'Other')}&#10;                        disabled={!answers[`${question.id}Other`]}&#10;                        sx={{ mt: 2 }}&#10;                      &gt;&#10;                        {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                      &lt;/Button&gt;&#10;                    &lt;/Grid&gt;&#10;                  )}&#10;                &lt;/Grid&gt;&#10;              );&#10;&#10;            case 'textarea':&#10;              return (&#10;                &lt;&gt;&#10;                  &lt;TextField&#10;                    fullWidth&#10;                    multiline&#10;                    rows={4}&#10;                    placeholder={question.placeholder}&#10;                    value={currentValue}&#10;                    onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;                  /&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant=&quot;contained&quot;&#10;                    onClick={() =&gt; handleAnswer((currentValue || '').trim())}&#10;                    disabled={!((currentValue || '').trim())}&#10;                    sx={{ mt: 2 }}&#10;                  &gt;&#10;                    {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                  &lt;/Button&gt;&#10;                &lt;/&gt;&#10;              );&#10;&#10;            default:&#10;              return (&#10;                &lt;&gt;&#10;                  &lt;TextField&#10;                    fullWidth&#10;                    type={question.type}&#10;                    placeholder={question.placeholder}&#10;                    value={currentValue}&#10;                    inputProps={{&#10;                      min: question.min,&#10;                      max: question.max,&#10;                      pattern: question.pattern&#10;                    }}&#10;                    onChange={(e) =&gt; setAnswers({ ...answers, [question.id]: e.target.value })}&#10;                  /&gt;&#10;                  &lt;Button&#10;                    fullWidth&#10;                    variant=&quot;contained&quot;&#10;                    onClick={() =&gt; handleAnswer((currentValue || '').trim())}&#10;                    disabled={!((currentValue || '').trim())}&#10;                    sx={{ mt: 2 }}&#10;                  &gt;&#10;                    {currentQuestion === questions.length - 1 ? 'Complete Registration' : 'Next Question'}&#10;                  &lt;/Button&gt;&#10;                &lt;/&gt;&#10;              );&#10;          }&#10;        })()}&#10;      &lt;/Card&gt;&#10;&#10;      {/* Back Button - Outside the card */}&#10;      &lt;Box sx={{ display: 'flex', justifyContent: 'flex-start', mt: 3, maxWidth: 600, mx: 'auto' }}&gt;&#10;        &lt;Button&#10;          startIcon={&lt;FaArrowLeft /&gt;}&#10;          onClick={handlePrevious}&#10;          variant=&quot;outlined&quot;&#10;          sx={{ mr: 2 }}&#10;        &gt;&#10;          {currentQuestion === 0 ? 'Back to Consent Form' : 'Previous Question'}&#10;        &lt;/Button&gt;&#10;      &lt;/Box&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>