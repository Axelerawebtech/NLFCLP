require('dotenv').config({ path: '.env.local' });
const dbConnect = require('./lib/mongodb.js').default;
const ProgramConfig = require('./models/ProgramConfig.js').default;

async function fixOptionsCompletely() {
  try {
    console.log('üîß Fixing burden assessment options completely...');
    await dbConnect();
    console.log('‚úÖ Database connected');

    // Define the complete standard options that should exist for every question
    const standardOptions = [
      {
        optionText: { 
          english: 'Never', 
          kannada: '‡≤é‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ç ‡≤á‡≤≤‡≥ç‡≤≤', 
          hindi: '‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç' 
        },
        score: 0
      },
      {
        optionText: { 
          english: 'Rarely', 
          kannada: '‡≤µ‡≤ø‡≤∞‡≤≥‡≤µ‡≤æ‡≤ó‡≤ø', 
          hindi: '‡§∂‡§æ‡§Ø‡§¶ ‡§π‡•Ä ‡§ï‡§≠‡•Ä' 
        },
        score: 1
      },
      {
        optionText: { 
          english: 'Sometimes', 
          kannada: '‡≤ï‡≥Ü‡≤≤‡≤µ‡≥ä‡≤Æ‡≥ç‡≤Æ‡≥Ü', 
          hindi: '‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä' 
        },
        score: 2
      },
      {
        optionText: { 
          english: 'Quite Frequently', 
          kannada: '‡≤¨‡≤π‡≤≥ ‡≤Ü‡≤ó‡≤æ‡≤ó‡≥ç‡≤ó‡≥Ü', 
          hindi: '‡§ï‡§æ‡§´‡•Ä ‡§¨‡§æ‡§∞' 
        },
        score: 3
      },
      {
        optionText: { 
          english: 'Nearly Always', 
          kannada: '‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó‡≤≤‡≥Ç', 
          hindi: '‡§≤‡§ó‡§≠‡§ó ‡§π‡§Æ‡•á‡§∂‡§æ' 
        },
        score: 4
      }
    ];

    const config = await ProgramConfig.findOne({ configType: 'global' });
    
    if (!config) {
      console.log('‚ùå No global config found');
      return;
    }

    if (!config.day1 || !config.day1.burdenTestQuestions) {
      console.log('‚ùå No burden test questions found');
      return;
    }

    console.log(`üîÑ Updating ${config.day1.burdenTestQuestions.length} questions with options...`);
    
    // Update each question's options directly in the array
    for (let i = 0; i < config.day1.burdenTestQuestions.length; i++) {
      const question = config.day1.burdenTestQuestions[i];
      console.log(`üîß Fixing question ${i + 1}: "${question.questionText.english.substring(0, 50)}..."`);
      
      // Directly assign the options
      config.day1.burdenTestQuestions[i].options = standardOptions;
      
      console.log(`‚úÖ Question ${i + 1} now has ${standardOptions.length} options`);
    }

    // Force mark the entire nested document as modified
    config.markModified('day1');
    config.markModified('day1.burdenTestQuestions');

    // Save the document
    console.log('üíæ Saving updated configuration...');
    await config.save();

    console.log('‚úÖ Configuration saved successfully!');

    // Verify the fix by re-fetching
    console.log('üîç Verifying the fix...');
    const verifyConfig = await ProgramConfig.findOne({ configType: 'global' });
    const firstQuestion = verifyConfig.day1.burdenTestQuestions[0];
    
    console.log('üìä Verification results:');
    console.log(`‚úì Total questions: ${verifyConfig.day1.burdenTestQuestions.length}`);
    console.log(`‚úì First question options count: ${firstQuestion.options.length}`);
    console.log(`‚úì First option text: ${firstQuestion.options[0]?.optionText?.english}`);
    console.log(`‚úì All options scores: [${firstQuestion.options.map(o => o.score).join(', ')}]`);

    if (firstQuestion.options.length === 5) {
      console.log('üéâ SUCCESS: Options are now properly saved!');
    } else {
      console.log('‚ùå FAILED: Options still not saved correctly');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

fixOptionsCompletely();